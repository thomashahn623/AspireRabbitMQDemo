<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aspire.Hosting</name>
    </assembly>
    <members>
        <member name="T:Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent">
            <summary>
            This experimental event is published after all endpoints have been allocated.
            </summary>
            <param name="services">The <see cref="T:System.IServiceProvider"/> instance.</param>
            <param name="model">The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.</param>
            <remarks>
            Subscribing to this event is analogous to implementing the <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterEndpointsAllocatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>
            method. This event provides access to the <see cref="T:System.IServiceProvider"/> interface to resolve dependencies including
            <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> service which is passed in as an argument
            in <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterEndpointsAllocatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>.
            </remarks>
            <example>
            Subscribe to the <see cref="T:Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent"/> event and resolve the distributed application model.
            <code lang="C#">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.Eventing.Subscribe&lt;AfterEndpointsAllocatedEvent&gt;(async (@event, cancellationToken) =&gt; {
              var appModel = @event.ServiceProvider.GetRequiredService&lt;DistributedApplicationModel&gt;();
              // Update configuration of resource based on final endpoint configuration
            });
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent.#ctor(System.IServiceProvider,Aspire.Hosting.ApplicationModel.DistributedApplicationModel)">
            <summary>
            This experimental event is published after all endpoints have been allocated.
            </summary>
            <param name="services">The <see cref="T:System.IServiceProvider"/> instance.</param>
            <param name="model">The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.</param>
            <remarks>
            Subscribing to this event is analogous to implementing the <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterEndpointsAllocatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>
            method. This event provides access to the <see cref="T:System.IServiceProvider"/> interface to resolve dependencies including
            <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> service which is passed in as an argument
            in <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterEndpointsAllocatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>.
            </remarks>
            <example>
            Subscribe to the <see cref="T:Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent"/> event and resolve the distributed application model.
            <code lang="C#">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.Eventing.Subscribe&lt;AfterEndpointsAllocatedEvent&gt;(async (@event, cancellationToken) =&gt; {
              var appModel = @event.ServiceProvider.GetRequiredService&lt;DistributedApplicationModel&gt;();
              // Update configuration of resource based on final endpoint configuration
            });
            </code>
            </example>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent.Services">
            <summary>
            The <see cref="T:System.IServiceProvider"/> instance.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent.Model">
            <summary>
            The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent">
            <summary>
            This experimental event is published after all resuorces have been created.
            </summary>
            <param name="services">The <see cref="T:System.IServiceProvider"/> instance.</param>
            <param name="model">The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.</param>
            <remarks>
            Subscribing to this event is analogous to implementing the <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterResourcesCreatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>
            method. This event provides access to the <see cref="T:System.IServiceProvider"/> interface to resolve dependencies including
            <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> service which is passed in as an argument
            in <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterResourcesCreatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>.
            </remarks>
            <example>
            Subscribe to the <see cref="T:Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent"/> event and resolve the distributed application model.
            <code lang="C#">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.Eventing.Subscribe&lt;AfterResourcesCreatedEvent&gt;(async (@event, cancellationToken) =&gt; {
              var appModel = @event.ServiceProvider.GetRequiredService&lt;DistributedApplicationModel&gt;();
              // Run post startup logic.
            });
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent.#ctor(System.IServiceProvider,Aspire.Hosting.ApplicationModel.DistributedApplicationModel)">
            <summary>
            This experimental event is published after all resuorces have been created.
            </summary>
            <param name="services">The <see cref="T:System.IServiceProvider"/> instance.</param>
            <param name="model">The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.</param>
            <remarks>
            Subscribing to this event is analogous to implementing the <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterResourcesCreatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>
            method. This event provides access to the <see cref="T:System.IServiceProvider"/> interface to resolve dependencies including
            <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> service which is passed in as an argument
            in <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterResourcesCreatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>.
            </remarks>
            <example>
            Subscribe to the <see cref="T:Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent"/> event and resolve the distributed application model.
            <code lang="C#">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.Eventing.Subscribe&lt;AfterResourcesCreatedEvent&gt;(async (@event, cancellationToken) =&gt; {
              var appModel = @event.ServiceProvider.GetRequiredService&lt;DistributedApplicationModel&gt;();
              // Run post startup logic.
            });
            </code>
            </example>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent.Services">
            <summary>
            The <see cref="T:System.IServiceProvider"/> instance.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent.Model">
            <summary>
            The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.AllocatedEndpoint">
            <summary>
            Represents an endpoint allocated for a service instance.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.#ctor(Aspire.Hosting.ApplicationModel.EndpointAnnotation,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.AllocatedEndpoint"/> class.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <param name="address">The IP address of the endpoint.</param>
            <param name="containerHostAddress">The address of the container host.</param>
            <param name="port">The port number of the endpoint.</param>
            <param name="targetPortExpression">A string representing how to retrieve the target port of the <see cref="T:Aspire.Hosting.ApplicationModel.AllocatedEndpoint"/> instance.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.Endpoint">
            <summary>
            Gets the endpoint which this allocation is associated with.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.Address">
            <summary>
            The address of the endpoint
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.ContainerHostAddress">
            <summary>
            The address of the container host. This is only set for containerized services.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.Port">
            <summary>
            The port used by the endpoint
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.UriScheme">
            <summary>
            For URI-addressed services, contains the scheme part of the address.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.EndPointString">
            <summary>
            Endpoint in string representation formatted as <c>"Address:Port"</c>.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.UriString">
            <summary>
            URI in string representation.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.TargetPortExpression">
            <summary>
            A string representing how to retrieve the target port of the <see cref="T:Aspire.Hosting.ApplicationModel.AllocatedEndpoint"/> instance.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.ToString">
            <summary>
            Returns a string representation of the allocated endpoint URI.
            </summary>
            <returns>The URI string, <see cref="P:Aspire.Hosting.ApplicationModel.AllocatedEndpoint.UriString"/>.</returns>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent">
            <summary>
            This event is raised by orchestrators before they have started a new resource.
            </summary>
            <param name="resource">The resource that is being created.</param>
            <param name="services">The <see cref="T:System.IServiceProvider"/> for the app host.</param>
            <remarks>
            Resources that are created by orchestrators may not yet be ready to handle requests.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent.#ctor(Aspire.Hosting.ApplicationModel.IResource,System.IServiceProvider)">
            <summary>
            This event is raised by orchestrators before they have started a new resource.
            </summary>
            <param name="resource">The resource that is being created.</param>
            <param name="services">The <see cref="T:System.IServiceProvider"/> for the app host.</param>
            <remarks>
            Resources that are created by orchestrators may not yet be ready to handle requests.
            </remarks>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent.Resource">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent.Services">
            <summary>
            The <see cref="T:System.IServiceProvider"/> for the app host.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.BeforeStartEvent">
            <summary>
            This experimental event is published before the application starts.
            </summary>
            <param name="services">The <see cref="T:System.IServiceProvider"/> instance.</param>
            <param name="model">The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.</param>
            <remarks>
            Subscribing to this event is analogous to implementing the <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.BeforeStartAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>
            method. This event provides access to the <see cref="T:System.IServiceProvider"/> interface to resolve dependencies including
            <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> service which is passed in as an argument
            in <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.BeforeStartAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>.
            </remarks>
            <example>
            Subscribe to the <see cref="T:Aspire.Hosting.ApplicationModel.BeforeStartEvent"/> event and resolve the distributed application model.
            <code lang="C#">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.Eventing.Subscribe&lt;BeforeStartEvent&gt;(async (@event, cancellationToken) =&gt; {
              var appModel = @event.ServiceProvider.GetRequiredService&lt;DistributedApplicationModel&gt;();
              // Mutate the distributed application model.
            });
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.BeforeStartEvent.#ctor(System.IServiceProvider,Aspire.Hosting.ApplicationModel.DistributedApplicationModel)">
            <summary>
            This experimental event is published before the application starts.
            </summary>
            <param name="services">The <see cref="T:System.IServiceProvider"/> instance.</param>
            <param name="model">The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.</param>
            <remarks>
            Subscribing to this event is analogous to implementing the <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.BeforeStartAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>
            method. This event provides access to the <see cref="T:System.IServiceProvider"/> interface to resolve dependencies including
            <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> service which is passed in as an argument
            in <see cref="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.BeforeStartAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)"/>.
            </remarks>
            <example>
            Subscribe to the <see cref="T:Aspire.Hosting.ApplicationModel.BeforeStartEvent"/> event and resolve the distributed application model.
            <code lang="C#">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.Eventing.Subscribe&lt;BeforeStartEvent&gt;(async (@event, cancellationToken) =&gt; {
              var appModel = @event.ServiceProvider.GetRequiredService&lt;DistributedApplicationModel&gt;();
              // Mutate the distributed application model.
            });
            </code>
            </example>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.BeforeStartEvent.Services">
            <summary>
            The <see cref="T:System.IServiceProvider"/> instance.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.BeforeStartEvent.Model">
            <summary>
            The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> instance.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation">
            <summary>
            Represents an annotation that provides a callback to be executed with a list of command-line arguments when an executable resource is started.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation.#ctor(System.Func{Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation"/> class with the specified callback action.
            </summary>
            <param name="callback"> The callback action to be executed.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation.#ctor(System.Action{System.Collections.Generic.IList{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation"/> class with the specified callback action.
            </summary>
            <param name="callback"> The callback action to be executed.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation.Callback">
            <summary>
            Gets the callback action to be executed when the executable arguments are parsed.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext">
            <summary>
            Represents a callback context for the list of command-line arguments associated with an executable resource.
            </summary>
            <param name="args"> The list of command-line arguments.</param>
            <param name="cancellationToken"> The cancellation token associated with this execution.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext.#ctor(System.Collections.Generic.IList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Represents a callback context for the list of command-line arguments associated with an executable resource.
            </summary>
            <param name="args"> The list of command-line arguments.</param>
            <param name="cancellationToken"> The cancellation token associated with this execution.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext.Args">
            <summary>
            Gets the list of command-line arguments.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext.CancellationToken">
            <summary>
            Gets the cancellation token associated with the callback context.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ConnectionStringRedirectAnnotation">
            <summary>
            Links to a resource that implements <see cref="T:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString"/> that can be used by the containing resource to acquire a connection string.
            </summary>
            <param name="resource">Resource that </param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ConnectionStringRedirectAnnotation.#ctor(Aspire.Hosting.ApplicationModel.IResourceWithConnectionString)">
            <summary>
            Links to a resource that implements <see cref="T:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString"/> that can be used by the containing resource to acquire a connection string.
            </summary>
            <param name="resource">Resource that </param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ConnectionStringRedirectAnnotation.Resource">
            <summary>
            Callback to acquire connection string.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ConnectionStringReference">
            <summary>
            Represents a reference to a connection string.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ConnectionStringReference.#ctor(Aspire.Hosting.ApplicationModel.IResourceWithConnectionString,System.Boolean)">
            <summary>
            Represents a reference to a connection string.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ConnectionStringReference.Resource">
            <summary>
            The resource that the connection string is referencing.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ConnectionStringReference.Optional">
            <summary>
            A flag indicating whether the connection string is optional.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ContainerImageAnnotation">
            <summary>
            Represents an annotation for a container image.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Registry">
            <summary>
            Gets or sets the registry for the container image.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Image">
            <summary>
            Gets or sets the image for the container.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Tag">
            <summary>
            Gets or sets the tag for the container image.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.SHA256">
            <summary>
            Gets or sets the SHA256 for the specific image.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ContainerMountAnnotation">
            <summary>
            Represents a mount annotation for a container resource.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.#ctor(System.String,System.String,Aspire.Hosting.ApplicationModel.ContainerMountType,System.Boolean)">
            <summary>
            Instantiates a mount annotation that specifies the details for a container mount.
            </summary>
            <param name="source">The source path if a bind mount or name if a volume. Can be <c>null</c> if the mount is an anonymous volume.</param>
            <param name="target">The target path of the mount.</param>
            <param name="type">The type of the mount.</param>
            <param name="isReadOnly">A value indicating whether the mount is read-only.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.Source">
            <summary>
            Gets the source of the bind mount or name if a volume. Can be <c>null</c> if the mount is an anonymous volume.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.Target">
            <summary>
            Gets the target of the mount.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.Type">
            <summary>
            Gets the type of the mount.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.IsReadOnly">
            <summary>
            Gets a value indicating whether the volume mount is read-only.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ContainerMountType">
            <summary>
            Represents the type of a container mount.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.ContainerMountType.BindMount">
            <summary>
            A local directory or file that is mounted into the container.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.ContainerMountType.Volume">
            <summary>
            A volume.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ContainerResource">
            <summary>
            A resource that represents a specified container.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="entrypoint">An optional container entrypoint.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ContainerResource.#ctor(System.String,System.String)">
            <summary>
            A resource that represents a specified container.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="entrypoint">An optional container entrypoint.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerResource.Entrypoint">
            <summary>
            The container Entrypoint.
            </summary>
            <remarks><c>null</c> means use the default Entrypoint defined by the container.</remarks>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackAnnotation">
            <summary>
            Represents an additional argument to pass to the container runtime run command.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackAnnotation.#ctor(System.Func{Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackContext,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackAnnotation"/> class with the specified callback action.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackAnnotation.#ctor(System.Action{System.Collections.Generic.IList{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackAnnotation"/> class with the specified callback action.
            </summary>
            <param name="callback">The callback action to be executed.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackAnnotation.Callback">
            <summary>
            Gets the callback action to be executed when the executable arguments are parsed.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackContext">
            <summary>
            Represents a callback context for the list of command-line arguments to be passed to the container runtime run command.
            </summary>
            <param name="args">The list of command-line arguments.</param>
            <param name="cancellationToken">The cancellation token associated with this execution.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackContext.#ctor(System.Collections.Generic.IList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Represents a callback context for the list of command-line arguments to be passed to the container runtime run command.
            </summary>
            <param name="args">The list of command-line arguments.</param>
            <param name="cancellationToken">The cancellation token associated with this execution.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackContext.Args">
            <summary>
            Gets the list of command-line arguments.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackContext.CancellationToken">
            <summary>
            Gets the cancellation token associated with the callback context.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.CustomResourceKnownProperties">
            <summary>
            Known properties for resources that show up in the dashboard.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceKnownProperties.Source">
            <summary>
            The source of the resource
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot">
            <summary>
            An immutable snapshot of the state of a resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.ResourceType">
            <summary>
            The type of the resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Properties">
            <summary>
            The properties that should show up in the dashboard for this resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.CreationTimeStamp">
            <summary>
            The creation timestamp of the resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.State">
            <summary>
            Represents the state of the resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.ExitCode">
            <summary>
            The exit code of the resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.EnvironmentVariables">
            <summary>
            The environment variables that should show up in the dashboard for this resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Urls">
            <summary>
            The URLs that should show up in the dashboard for this resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceStateSnapshot">
            <summary>
            A snapshot of the resource state
            </summary>
            <param name="Text">The text for the state update.</param>
            <param name="Style">The style for the state update. Use <seealso cref="T:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles"/> for the supported styles.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.#ctor(System.String,System.String)">
            <summary>
            A snapshot of the resource state
            </summary>
            <param name="Text">The text for the state update.</param>
            <param name="Style">The style for the state update. Use <seealso cref="T:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles"/> for the supported styles.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.Text">
            <summary>The text for the state update.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.Style">
            <summary>The style for the state update. Use <seealso cref="T:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles"/> for the supported styles.</summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.op_Implicit(System.String)~Aspire.Hosting.ApplicationModel.ResourceStateSnapshot">
            <summary>
            Convert text to state snapshot. The style will be null by default
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot">
            <summary>
            A snapshot of an environment variable.
            </summary>
            <param name="Name">The name of the environment variable.</param>
            <param name="Value">The value of the environment variable.</param>
            <param name="IsFromSpec">Determines if this environment variable was defined in the resource explicitly or computed (for e.g. inherited from the process hierarchy).</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            A snapshot of an environment variable.
            </summary>
            <param name="Name">The name of the environment variable.</param>
            <param name="Value">The value of the environment variable.</param>
            <param name="IsFromSpec">Determines if this environment variable was defined in the resource explicitly or computed (for e.g. inherited from the process hierarchy).</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.Name">
            <summary>The name of the environment variable.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.Value">
            <summary>The value of the environment variable.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.IsFromSpec">
            <summary>Determines if this environment variable was defined in the resource explicitly or computed (for e.g. inherited from the process hierarchy).</summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.UrlSnapshot">
            <summary>
            A snapshot of the url.
            </summary>
            <param name="Name">Name of the url.</param>
            <param name="Url">The full uri.</param>
            <param name="IsInternal">Determines if this url is internal.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.UrlSnapshot.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            A snapshot of the url.
            </summary>
            <param name="Name">Name of the url.</param>
            <param name="Url">The full uri.</param>
            <param name="IsInternal">Determines if this url is internal.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.UrlSnapshot.Name">
            <summary>Name of the url.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.UrlSnapshot.Url">
            <summary>The full uri.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.UrlSnapshot.IsInternal">
            <summary>Determines if this url is internal.</summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot">
            <summary>
            A snapshot of the resource property.
            </summary>
            <param name="Name">The name of the property.</param>
            <param name="Value">The value of the property.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.#ctor(System.String,System.Object)">
            <summary>
            A snapshot of the resource property.
            </summary>
            <param name="Name">The name of the property.</param>
            <param name="Value">The value of the property.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.Name">
            <summary>The name of the property.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.Value">
            <summary>The value of the property.</summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles">
            <summary>
            The set of well known resource states.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Success">
            <summary>
            The success state
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Error">
            <summary>
            The error state. Useful for error messages.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Info">
            <summary>
            The info state. Useful for informational messages.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Warn">
            <summary>
            The warn state. Useful for showing warnings.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.KnownResourceStates">
            <summary>
            The set of well known resource states.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStates.Hidden">
            <summary>
            The hidden state. Useful for hiding the resource.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStates.Starting">
            <summary>
            The starting state. Useful for showing the resource is starting.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStates.Running">
            <summary>
            The running state. Useful for showing the resource is running.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStates.FailedToStart">
            <summary>
            The finished state. Useful for showing the resource has failed to start successfully.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStates.Stopping">
            <summary>
            The stopping state. Useful for showing the resource is stopping.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStates.Exited">
            <summary>
            The exited state. Useful for showing the resource has exited.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.KnownResourceStates.Finished">
            <summary>
            The finished state. Useful for showing the resource has finished.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.DisableForwardedHeadersAnnotation">
            <summary>
            Represents an annotation that disables enabling forwarded headers on ASP.NET Core projects on publish.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel">
            <summary>
            Represents a distributed application.
            </summary>
            <param name="resources">The resource collection used to initiate the model.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.DistributedApplicationModel.#ctor(Aspire.Hosting.ApplicationModel.IResourceCollection)">
            <summary>
            Represents a distributed application.
            </summary>
            <param name="resources">The resource collection used to initiate the model.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.DistributedApplicationModel.Resources">
            <summary>
            Gets the collection of resources associated with the distributed application.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.DockerBuildArg">
            <summary>
            Represents a name/value pair, used to satisfy the <c>docker builder --build-arg &lt;NAME&gt;[=&lt;VALUE&gt;]</c> command switch.
            For more information, see <a href="https://docs.docker.com/reference/cli/docker/image/build/#build-arg"></a>.
            </summary>
            <param name="name">The required name of the arg.</param>
            <param name="value">The optional value of the arg, when omitted the value is populated from the corresponding environment variable.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.DockerBuildArg.#ctor(System.String,System.Object)">
            <summary>
            Represents a name/value pair, used to satisfy the <c>docker builder --build-arg &lt;NAME&gt;[=&lt;VALUE&gt;]</c> command switch.
            For more information, see <a href="https://docs.docker.com/reference/cli/docker/image/build/#build-arg"></a>.
            </summary>
            <param name="name">The required name of the arg.</param>
            <param name="value">The optional value of the arg, when omitted the value is populated from the corresponding environment variable.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.DockerBuildArg.Name">
            <summary>
            Gets or initializes the name part of the <c>docker builder --build-arg &lt;NAME&gt;[=&lt;VALUE&gt;]</c>.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.DockerBuildArg.Value">
            <summary>
            Gets or initializes the value part of the <c>docker builder --build-arg &lt;NAME&gt;[=&lt;VALUE&gt;]</c>.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation">
            <summary>
            Represents an endpoint annotation that describes how a service should be bound to a network.
            </summary>
            <remarks>
            This class is used to specify the network protocol, port, URI scheme, transport, and other details for a service.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointAnnotation.#ctor(System.Net.Sockets.ProtocolType,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation"/>.
            </summary>
            <param name="protocol">Network protocol: TCP or UDP are supported today, others possibly in future.</param>
            <param name="uriScheme">If a service is URI-addressable, this is the URI scheme to use for constructing service URI.</param>
            <param name="transport">Transport that is being used (e.g. http, http2, http3 etc).</param>
            <param name="name">Name of the service.</param>
            <param name="port">Desired port for the service.</param>
            <param name="targetPort">This is the port the resource is listening on. If the endpoint is used for the container, it is the container port.</param>
            <param name="isExternal">Indicates that this endpoint should be exposed externally at publish time.</param>
            <param name="isProxied">Specifies if the endpoint will be proxied by DCP. Defaults to true.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.Name">
            <summary>
             Name of the service
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.Protocol">
            <summary>
            Network protocol: TCP or UDP are supported today, others possibly in future.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.Port">
            <summary>
            Desired port for the service
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.TargetPort">
            <summary>
            This is the port the resource is listening on. If the endpoint is used for the container, it is the container port.
            </summary>
            <remarks>
            Defaults to <see cref="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.Port"/>.
            </remarks>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.UriScheme">
            <summary>
            If a service is URI-addressable, this property will contain the URI scheme to use for constructing service URI.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.Transport">
            <summary>
            Transport that is being used (e.g. http, http2, http3 etc).
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.IsExternal">
            <summary>
            Indicates that this endpoint should be exposed externally at publish time.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.IsProxied">
            <summary>
            Indicates that this endpoint should be managed by DCP. This means it can be replicated and use a different port internally than the one publicly exposed.
            Setting to false means the endpoint will be handled and exposed by the resource.
            </summary>
            <remarks>Defaults to <c>true</c>.</remarks>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.FromLaunchProfile">
            <summary>
            Gets or sets a value indicating whether the endpoint is from a launch profile.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.TargetPortEnvironmentVariable">
            <summary>
            The environment variable that contains the target port. Setting prevents a variable from flowing into ASPNETCORE_URLS for project resources.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointAnnotation.AllocatedEndpoint">
            <summary>
            Gets or sets the allocated endpoint.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EndpointEnvironmentInjectionFilterAnnotation">
            <summary>
            Annotation that holds a filter that determines if environment variables should be injected for a given endpoint.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointEnvironmentInjectionFilterAnnotation.#ctor(System.Func{Aspire.Hosting.ApplicationModel.EndpointAnnotation,System.Boolean})">
            <summary>
            Annotation that holds a filter that determines if environment variables should be injected for a given endpoint.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EndpointReference">
            <summary>
            Represents an endpoint reference for a resource with endpoints.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.Resource">
            <summary>
            Gets the resource owner of the endpoint reference.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.EndpointName">
            <summary>
            Gets the name of the endpoint associated with the endpoint reference.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.IsAllocated">
            <summary>
            Gets a value indicating whether the endpoint is allocated.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.Exists">
            <summary>
            Gets a value indicating whether the endpoint exists.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointReference.GetExpression(Aspire.Hosting.ApplicationModel.EndpointProperty)">
            <summary>
            Gets the specified property expression of the endpoint. Defaults to the URL if no property is specified.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointReference.Property(Aspire.Hosting.ApplicationModel.EndpointProperty)">
            <summary>
            Gets the specified property expression of the endpoint. Defaults to the URL if no property is specified.
            </summary>
            <param name="property">The <see cref="T:Aspire.Hosting.ApplicationModel.EndpointProperty"/> enum value to use in the reference.</param>
            <returns>An <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReferenceExpression"/> representing the specified <see cref="T:Aspire.Hosting.ApplicationModel.EndpointProperty"/>.</returns>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.Port">
            <summary>
            Gets the port for this endpoint.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.TargetPort">
            <summary>
            Gets the target port for this endpoint. If the port is dynamically allocated, this will return <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.Host">
            <summary>
            Gets the host for this endpoint.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.ContainerHost">
            <summary>
            Gets the container host for this endpoint.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.Scheme">
            <summary>
            Gets the scheme for this endpoint.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReference.Url">
            <summary>
            Gets the URL for this endpoint.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointReference.#ctor(Aspire.Hosting.ApplicationModel.IResourceWithEndpoints,Aspire.Hosting.ApplicationModel.EndpointAnnotation)">
            <summary>
            Creates a new instance of <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/> with the specified endpoint name.
            </summary>
            <param name="owner">The resource with endpoints that owns the endpoint reference.</param>
            <param name="endpoint">The endpoint annotation.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointReference.#ctor(Aspire.Hosting.ApplicationModel.IResourceWithEndpoints,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/> with the specified endpoint name.
            </summary>
            <param name="owner">The resource with endpoints that owns the endpoint reference.</param>
            <param name="endpointName">The name of the endpoint.</param>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EndpointReferenceExpression">
            <summary>
            Represents a property expression for an endpoint reference.
            </summary>
            <param name="endpointReference">The endpoint reference.</param>
            <param name="property">The property of the endpoint.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.#ctor(Aspire.Hosting.ApplicationModel.EndpointReference,Aspire.Hosting.ApplicationModel.EndpointProperty)">
            <summary>
            Represents a property expression for an endpoint reference.
            </summary>
            <param name="endpointReference">The endpoint reference.</param>
            <param name="property">The property of the endpoint.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.Endpoint">
            <summary>
            Gets the <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/>.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.Property">
            <summary>
            Gets the <see cref="T:Aspire.Hosting.ApplicationModel.EndpointProperty"/> for the property expression.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.ValueExpression">
            <summary>
            Gets the expression of the property of the endpoint.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.GetValueAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the value of the property of the endpoint.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the selected <see cref="T:Aspire.Hosting.ApplicationModel.EndpointProperty"/> value.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the selected <see cref="T:Aspire.Hosting.ApplicationModel.EndpointProperty"/> enumeration is not known.</exception>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EndpointProperty">
            <summary>
            Represents the properties of an endpoint that can be referenced.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.EndpointProperty.Url">
            <summary>
            The entire URL of the endpoint.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.EndpointProperty.Host">
            <summary>
            The host of the endpoint.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.EndpointProperty.IPV4Host">
            <summary>
            The IPv4 address of the endpoint.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.EndpointProperty.Port">
            <summary>
            The port of the endpoint.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.EndpointProperty.Scheme">
            <summary>
            The scheme of the endpoint.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.EndpointProperty.TargetPort">
            <summary>
            The target port of the endpoint.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation">
            <summary>
            Represents an annotation that provides a callback to modify the environment variables of an application.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.#ctor(System.String,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation"/> class with the specified name and callback function.
            </summary>
            <param name="name">The name of the environment variable to set.</param>
            <param name="callback">The callback function that returns the value to set the environment variable to.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.#ctor(System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation"/> class with the specified callback action.
            </summary>
            <param name="callback">The callback action to be executed.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.#ctor(System.Action{Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation"/> class with the specified callback.
            </summary>
            <param name="callback">The callback to be invoked.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.#ctor(System.Func{Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation"/> class with the specified callback.
            </summary>
            <param name="callback">The callback to be invoked.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.Callback">
            <summary>
            Gets or sets the callback action to be executed when the environment is being built.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext">
            <summary>
            Represents a callback context for environment variables associated with a publisher.
            </summary>
            <param name="executionContext">The execution context for this invocation of the AppHost.</param>
            <param name="environmentVariables">The environment variables associated with this execution.</param>
            <param name="cancellationToken">A <see cref="P:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.CancellationToken"/>.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.#ctor(Aspire.Hosting.DistributedApplicationExecutionContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Represents a callback context for environment variables associated with a publisher.
            </summary>
            <param name="executionContext">The execution context for this invocation of the AppHost.</param>
            <param name="environmentVariables">The environment variables associated with this execution.</param>
            <param name="cancellationToken">A <see cref="P:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.CancellationToken"/>.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.EnvironmentVariables">
            <summary>
            Gets the environment variables associated with the callback context.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.CancellationToken">
            <summary>
            Gets the CancellationToken associated with the callback context.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.Logger">
            <summary>
            An optional logger to use for logging.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.ExecutionContext">
            <summary>
            Gets the execution context associated with this invocation of the AppHost.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ExecutableResource">
            <summary>
            A resource that represents a specified executable process.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="command">The command to execute.</param>
            <param name="workingDirectory">The working directory of the executable.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ExecutableResource.#ctor(System.String,System.String,System.String)">
            <summary>
            A resource that represents a specified executable process.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="command">The command to execute.</param>
            <param name="workingDirectory">The working directory of the executable.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ExecutableResource.Command">
            <summary>
            Gets the command associated with this executable resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ExecutableResource.WorkingDirectory">
            <summary>
            Gets the working directory for the executable resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.HostUrl">
            <summary>
            Represents a URL on the host machine. When referenced in a container resource, localhost will be
            replaced with the configured container host name.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.HostUrl.#ctor(System.String)">
            <summary>
            Represents a URL on the host machine. When referenced in a container resource, localhost will be
            replaced with the configured container host name.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.Http2ServiceAnnotation">
            <summary>
            Internal marker
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider">
            <summary>
            An interface that allows an object to express how it should be represented in a manifest.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider.ValueExpression">
            <summary>
            Gets the expression that represents a value in manifest.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResource">
            <summary>
            Represents a resource that can be hosted by an application.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResource.Annotations">
            <summary>
            Gets the annotations associated with the resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceAnnotation">
            <summary>
            Represents an annotation for a resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1">
            <summary>
            Defines a builder for creating resources of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of resource to build.</typeparam>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResourceBuilder`1.ApplicationBuilder">
            <summary>
            Gets the distributed application builder associated with this resource builder.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResourceBuilder`1.Resource">
            <summary>
            Gets the resource of type <typeparamref name="T"/> that is being built.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.IResourceBuilder`1.WithAnnotation``1(Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior)">
            <summary>
            Adds an annotation to the resource being built.
            </summary>
            <typeparam name="TAnnotation">The type of the annotation to add.</typeparam>
            <param name="behavior">The behavior to use when adding the annotation.</param>
            <returns>The resource builder instance.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.IResourceBuilder`1.WithAnnotation``1(``0,Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior)">
            <summary>
            Adds an annotation to the resource being built.
            </summary>
            <typeparam name="TAnnotation">The type of the annotation to add.</typeparam>
            <param name="annotation">The annotation to add.</param>
            <param name="behavior">The behavior to use when adding the annotation.</param>
            <returns>The resource builder instance.</returns>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceCollection">
            <summary>
            Represents a collection of resources.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceWithArgs">
            <summary>
            Represents a resource that is associated with commandline arguments.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString">
            <summary>
            Represents a resource that has a connection string associated with it.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString.GetConnectionStringAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the connection string associated with the resource.
            </summary>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>The connection string associated with the resource, when one is available.</returns>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString.ConnectionStringExpression">
            <summary>
            Describes the connection string format string used for this resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString.ConnectionStringEnvironmentVariable">
            <summary>
            The environment variable name to use for the connection string.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceWithEndpoints">
            <summary>
            Represents a resource that has endpoints associated with it.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceWithEnvironment">
            <summary>
            Represents a resource that is associated with an environment.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceWithParent`1">
            <summary>
            Represents a resource that has a parent resource of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the parent resource.</typeparam>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResourceWithParent`1.Parent">
            <summary>
            Gets the parent resource of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IResourceWithParent">
            <summary>
            Represents a resource that has a parent resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IResourceWithParent.Parent">
            <summary>
            Gets the parent resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IValueProvider">
            <summary>
            An interface that allows the value to be provided for an environment variable.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.IValueProvider.GetValueAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the value for use as an environment variable.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.IValueWithReferences">
            <summary>
            An interface that allows the value to list its references.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.IValueWithReferences.References">
            <summary>
            The referenced objects of the value.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.LogLine">
            <summary>
            Represents a console log line.
            </summary>
            <param name="LineNumber">The line number.</param>
            <param name="Content">The content.</param>
            <param name="IsErrorMessage">A value indicating whether the log line is error output.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.LogLine.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Represents a console log line.
            </summary>
            <param name="LineNumber">The line number.</param>
            <param name="Content">The content.</param>
            <param name="IsErrorMessage">A value indicating whether the log line is error output.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.LogLine.LineNumber">
            <summary>The line number.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.LogLine.Content">
            <summary>The content.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.LogLine.IsErrorMessage">
            <summary>A value indicating whether the log line is error output.</summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation">
            <summary>
            Represents an annotation that provides a callback to be executed during manifest publishing.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.#ctor(System.Action{Aspire.Hosting.Publishing.ManifestPublishingContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation"/> class with the specified callback.
            </summary>
            <param name="callback">A callback which provides access to <see cref="T:Aspire.Hosting.Publishing.ManifestPublishingContext"/> which can be used for controlling JSON output into the manifest.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.#ctor(System.Func{Aspire.Hosting.Publishing.ManifestPublishingContext,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation"/> class with the specified callback.
            </summary>
            <param name="callback">A callback which provides access to <see cref="T:Aspire.Hosting.Publishing.ManifestPublishingContext"/> which can be used for controlling JSON output into the manifest.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.Callback">
            <summary>
            Gets the callback action for publishing the manifest.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.Ignore">
            <summary>
            Represents a <see langword="null"/>-based callback annotation for manifest 
            publishing used in scenarios where it's ignored.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ModelName.ValidateName(System.String,System.String)">
            <summary>
            Validate that a model name is valid.
            - Must start with an ASCII letter.
            - Must contain only ASCII letters, digits, and hyphens.
            - Must not end with a hyphen.
            - Must not contain consecutive hyphens.
            - Must be between 1 and 64 characters long.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ParameterDefault">
            <summary>
            Represents how a default value should be retrieved.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ParameterDefault.WriteToManifest(Aspire.Hosting.Publishing.ManifestPublishingContext)">
            <summary>
            Writes the current <see cref="T:Aspire.Hosting.ApplicationModel.ParameterDefault"/> to the manifest context.
            </summary>
            <param name="context">The context for the manifest publishing operation.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ParameterDefault.GetDefaultValue">
            <summary>
            Generates a value for the parameter.
            </summary>
            <returns>The generated string value.</returns>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.GenerateParameterDefault">
             <summary>
             Represents that a default value should be generated.
             </summary>
             <remarks>
             The recommended minimum bits of entropy for a generated password is 128 bits.
            
             <para>
             The general calculation of bits of entropy is:
             </para>
            
             <c>log base 2 (numberPossibleOutputs)</c>
            
             <para>
             This generator uses 23 upper case, 23 lower case (excludes i,l,o,I,L,O to prevent confusion),
             10 numeric, and 11 special characters. So a total of 67 possible characters.
             </para>
             
             <para>
             When all character sets are enabled, the number of possible outputs is <c>(67 ^ length)</c>.
             The minimum password length for 128 bits of entropy is 22 characters: <c>log base 2 (67 ^ 22)</c>.
             </para>
            
             <para>
             When character sets are disabled, it lowers the number of possible outputs and thus the bits of entropy.
             </para>
            
             <para>
             Using MinLower, MinUpper, MinNumeric, and MinSpecial also lowers the number of possible outputs and thus the bits of entropy.
             </para>
             
             <para>
             A generalized lower-bound formula for the number of possible outputs is to consider a string of the form:
             </para>
            
             <code lang="csharp">
             {nonRequiredCharacters}{requiredCharacters}
            
             let a = MinLower, b = MinUpper, c = MinNumeric, d = MinSpecial
             let x = length - (a + b + c + d)
            
             nonRequiredPossibilities = 67^x
             requiredPossibilities = 23^a * 23^b * 10^c * 11^d * (a + b + c + d)! / (a! * b! * c! * d!)
             
             lower-bound of total possibilities = nonRequiredPossibilities * requiredPossibilities
             </code>
            
             Putting it all together, the lower-bound bits of entropy calculation is:
            
             <code lang="csharp">
             log base 2 [67^x * 23^a * 23^b * 10^c * 11^d * (a + b + c + d)! / (a! * b! * c! * d!)]
             </code>
             </remarks>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinLength">
            <summary>
            Gets or sets the minimum length of the generated value.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Lower">
            <summary>
            Gets or sets a value indicating whether to include lowercase alphabet characters in the result.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Upper">
            <summary>
            Gets or sets a value indicating whether to include uppercase alphabet characters in the result.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Numeric">
            <summary>
            Gets or sets a value indicating whether to include numeric characters in the result.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Special">
            <summary>
            Gets or sets a value indicating whether to include special characters in the result.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinLower">
            <summary>
            Gets or sets the minimum number of lowercase characters in the result.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinUpper">
            <summary>
            Gets or sets the minimum number of uppercase characters in the result.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinNumeric">
            <summary>
            Gets or sets the minimum number of numeric characters in the result.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinSpecial">
            <summary>
            Gets or sets the minimum number of special characters in the result.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.WriteToManifest(Aspire.Hosting.Publishing.ManifestPublishingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.GenerateParameterDefault.GetDefaultValue">
            <inheritdoc/>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ParameterResource">
            <summary>
            Represents a parameter resource.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ParameterResource.#ctor(System.String,System.Func{Aspire.Hosting.ApplicationModel.ParameterDefault,System.String},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/>.
            </summary>
            <param name="name">The name of the parameter resource.</param>
            <param name="callback">The callback function to retrieve the value of the parameter.</param>
            <param name="secret">A flag indicating whether the parameter is secret.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ParameterResource.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ParameterResource.Default">
            <summary>
            Represents how the default value of the parameter should be retrieved.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ParameterResource.Secret">
            <summary>
            Gets a value indicating whether the parameter is secret.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ParameterResource.IsConnectionString">
            <summary>
            Gets or sets a value indicating whether the parameter is a connection string.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ParameterResource.ValueExpression">
            <summary>
            Gets the expression used in the manifest to reference the value of the parameter.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ProjectResource">
            <summary>
            A resource that represents a specified .NET project.
            </summary>
            <param name="name">The name of the resource.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ProjectResource.#ctor(System.String)">
            <summary>
            A resource that represents a specified .NET project.
            </summary>
            <param name="name">The name of the resource.</param>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ProjectResourceExtensions">
            <summary>
            Provides extension methods for <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> to work with <see cref="T:Aspire.Hosting.ApplicationModel.ProjectResource"/> instances.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ProjectResourceExtensions.GetProjectResources(Aspire.Hosting.ApplicationModel.DistributedApplicationModel)">
            <summary>
            Returns all project resources in the distributed application model.
            </summary>
            <param name="model">The distributed application model.</param>
            <returns>An enumerable collection of project resources.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ProjectResourceExtensions.GetProjectMetadata(Aspire.Hosting.ApplicationModel.ProjectResource)">
            <summary>
            Gets the project metadata for the specified project resource.
            </summary>
            <param name="projectResource">The project resource.</param>
            <returns>The project metadata.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the project resource doesn't have project metadata.</exception>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ReferenceExpression">
            <summary>
            Represents an expression that might be made up of multiple resource properties. For example,
            a connection string might be made up of a host, port, and password from different endpoints.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ReferenceExpression.Format">
            <summary>
            The format string for this expression.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ReferenceExpression.ManifestExpressions">
            <summary>
            The manifest expressions for the parameters for the format string.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ReferenceExpression.ValueProviders">
            <summary>
            The list of <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> that will be used to resolve parameters for the format string.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ReferenceExpression.ValueExpression">
            <summary>
            The value expression for the format string.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpression.GetValueAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the value of the expression. The final string value after evaluating the format string and its parameters.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpression.Create(Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler@)">
            <summary>
            Creates a new instance of <see cref="T:Aspire.Hosting.ApplicationModel.ReferenceExpression"/> with the specified format and value providers.
            </summary>
            <param name="handler">The handler that contains the format and value providers.</param>
            <returns>A new instance of <see cref="T:Aspire.Hosting.ApplicationModel.ReferenceExpression"/> with the specified format and value providers.</returns>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler">
            <summary>
            Represents a handler for interpolated strings that contain expressions. Those expressions will either be literal strings or
            instances of types that implement both <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.
            </summary>
            <param name="literalLength">The length of the literal part of the interpolated string.</param>
            <param name="formattedCount">The number of formatted parts in the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents a handler for interpolated strings that contain expressions. Those expressions will either be literal strings or
            instances of types that implement both <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.
            </summary>
            <param name="literalLength">The length of the literal part of the interpolated string.</param>
            <param name="formattedCount">The number of formatted parts in the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.AppendLiteral(System.String)">
            <summary>
            Appends a literal value to the expression.
            </summary>
            <param name="value">The literal string value to be appended to the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.AppendFormatted(System.String)">
            <summary>
            Appends a formatted value to the expression.
            </summary>
            <param name="value">The formatted string to be appended to the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.AppendFormatted``1(``0)">
            <summary>
            Appends a formatted value to the expression. The value must implement <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.
            </summary>
            <param name="valueProvider">An instance of an object which implements <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder">
            <summary>
            A builder for creating <see cref="T:Aspire.Hosting.ApplicationModel.ReferenceExpression"/> instances.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.IsEmpty">
            <summary>
            Indicates whether the expression is empty.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.Append(Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler@)">
            <summary>
            Appends an interpolated string to the expression.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.AppendLiteral(System.String)">
            <summary>
            Appends a literal value to the expression.
            </summary>
            <param name="value">The literal string value to be appended to the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.AppendFormatted(System.String)">
            <summary>
            Appends a formatted value to the expression.
            </summary>
            <param name="value">The formatted string to be appended to the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.AppendFormatted``1(``0)">
            <summary>
            Appends a formatted value to the expression. The value must implement <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.
            </summary>
            <param name="valueProvider">An instance of an object which implements <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.Build">
            <summary>
            Builds the <see cref="T:Aspire.Hosting.ApplicationModel.ReferenceExpression"/>.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler">
            <summary>
            Represents a handler for interpolated strings that contain expressions. Those expressions will either be literal strings or
            instances of types that implement both <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.
            </summary>
            <param name="literalLength">The length of the literal part of the interpolated string.</param>
            <param name="formattedCount">The number of formatted parts in the interpolated string.</param>
            <param name="builder">The builder that will be used to create the <see cref="T:Aspire.Hosting.ApplicationModel.ReferenceExpression"/>.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.#ctor(System.Int32,System.Int32,Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder)">
            <summary>
            Represents a handler for interpolated strings that contain expressions. Those expressions will either be literal strings or
            instances of types that implement both <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.
            </summary>
            <param name="literalLength">The length of the literal part of the interpolated string.</param>
            <param name="formattedCount">The number of formatted parts in the interpolated string.</param>
            <param name="builder">The builder that will be used to create the <see cref="T:Aspire.Hosting.ApplicationModel.ReferenceExpression"/>.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.AppendLiteral(System.String)">
            <summary>
            Appends a literal value to the expression.
            </summary>
            <param name="value">The literal string value to be appended to the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.AppendFormatted(System.String)">
            <summary>
            Appends a formatted value to the expression.
            </summary>
            <param name="value">The formatted string to be appended to the interpolated string.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.AppendFormatted``1(``0)">
            <summary>
            Appends a formatted value to the expression. The value must implement <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.
            </summary>
            <param name="valueProvider">An instance of an object which implements <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> and <see cref="T:Aspire.Hosting.ApplicationModel.IManifestExpressionProvider"/>.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ReplicaAnnotation">
            <summary>
            Represents an annotation that specifies the number of replicas for a resource.
            </summary>
            <param name="replicas">The number of replicas for the resource.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ReplicaAnnotation.#ctor(System.Int32)">
            <summary>
            Represents an annotation that specifies the number of replicas for a resource.
            </summary>
            <param name="replicas">The number of replicas for the resource.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ReplicaAnnotation.Replicas">
            <summary>
            Gets the number of replicas for the application.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.Resource">
            <summary>
            Represents an abstract resource that can be used by an application, that implements <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/>.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.Resource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.Resource.Annotations">
            <summary>
            Gets the annotations associated with the resource.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.Resource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.ApplicationModel.Resource"/> class.
            </summary>
            <param name="name">The name of the resource.</param>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceAnnotationCollection">
            <summary>
            Represents a collection of resource metadata annotations.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior">
            <summary>
            Specifies behavior of the <see cref="M:Aspire.Hosting.ApplicationModel.IResourceBuilder`1.WithAnnotation``1(Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior)" />
            method when adding an annotation to the <see cref="P:Aspire.Hosting.ApplicationModel.IResource.Annotations"/> collection of a resource.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior.Append">
            <summary>
            Append the annotation to the collection. Existing annotations will be kept.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior.Replace">
            <summary>
            Replace the existing annotation. The existing annotation will be removed.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> interface.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetLastAnnotation``1(Aspire.Hosting.ApplicationModel.IResource,``0@)">
            <summary>
            Attempts to get the last annotation of the specified type from the resource.
            </summary>
            <typeparam name="T">The type of the annotation to get.</typeparam>
            <param name="resource">The resource to get the annotation from.</param>
            <param name="annotation">When this method returns, contains the last annotation of the specified type from the resource, if found; otherwise, the default value for <typeparamref name="T"/>.</param>
            <returns><c>true</c> if the last annotation of the specified type was found in the resource; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetAnnotationsOfType``1(Aspire.Hosting.ApplicationModel.IResource,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Attempts to retrieve all annotations of the specified type from the given resource.
            </summary>
            <typeparam name="T">The type of annotation to retrieve.</typeparam>
            <param name="resource">The resource to retrieve annotations from.</param>
            <param name="result">When this method returns, contains the annotations of the specified type, if found; otherwise, null.</param>
            <returns>true if annotations of the specified type were found; otherwise, false.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetEnvironmentVariables(Aspire.Hosting.ApplicationModel.IResource,System.Collections.Generic.IEnumerable{Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation}@)">
            <summary>
            Attempts to get the environment variables from the given resource.
            </summary>
            <param name="resource">The resource to get the environment variables from.</param>
            <param name="environmentVariables">The environment variables retrieved from the resource, if any.</param>
            <returns>True if the environment variables were successfully retrieved, false otherwise.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.GetEnvironmentVariableValuesAsync(Aspire.Hosting.ApplicationModel.IResourceWithEnvironment,Aspire.Hosting.DistributedApplicationOperation)">
            <summary>
            Get the environment variables from the given resource.
            </summary>
            <remarks>
            This method is useful when you want to make sure the environment variables are added properly to resources, mostly in test situations.
            This method has asynchronous behavior when <paramref name = "applicationOperation" /> is <see cref="F:Aspire.Hosting.DistributedApplicationOperation.Run"/>
            and environment variables were provided from <see cref="T:Aspire.Hosting.ApplicationModel.IValueProvider"/> otherwise it will be synchronous.
            </remarks>
            <param name="resource">The resource to get the environment variables from.</param>
            <param name="applicationOperation">The context in which the AppHost is being executed.</param>
            <returns>The environment variables retrieved from the resource.</returns>
            <example>
            Using <see cref="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.GetEnvironmentVariableValuesAsync(Aspire.Hosting.ApplicationModel.IResourceWithEnvironment,Aspire.Hosting.DistributedApplicationOperation)"/> inside
            a unit test to validate environment variable values.
            <code>
            var builder = DistributedApplication.CreateBuilder();
            var container = builder.AddContainer("elasticsearch", "library/elasticsearch", "8.14.0")
             .WithEnvironment("discovery.type", "single-node")
             .WithEnvironment("xpack.security.enabled", "true");
            
            var env = await container.Resource.GetEnvironmentVariableValuesAsync();
            
            Assert.Collection(env,
                env =>
                    {
                        Assert.Equal("discovery.type", env.Key);
                        Assert.Equal("single-node", env.Value);
                    },
                    env =>
                    {
                        Assert.Equal("xpack.security.enabled", env.Key);
                        Assert.Equal("true", env.Value);
                    });
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetContainerMounts(Aspire.Hosting.ApplicationModel.IResource,System.Collections.Generic.IEnumerable{Aspire.Hosting.ApplicationModel.ContainerMountAnnotation}@)">
            <summary>
            Attempts to get the container mounts for the specified resource.
            </summary>
            <param name="resource">The resource to get the volume mounts for.</param>
            <param name="volumeMounts">When this method returns, contains the volume mounts for the specified resource, if found; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the volume mounts were successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetEndpoints(Aspire.Hosting.ApplicationModel.IResource,System.Collections.Generic.IEnumerable{Aspire.Hosting.ApplicationModel.EndpointAnnotation}@)">
            <summary>
            Attempts to retrieve the endpoints for the given resource.
            </summary>
            <param name="resource">The resource to retrieve the endpoints for.</param>
            <param name="endpoints">The endpoints for the given resource, if found.</param>
            <returns>True if the endpoints were found, false otherwise.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.GetEndpoints(Aspire.Hosting.ApplicationModel.IResourceWithEndpoints)">
            <summary>
            Gets the endpoints for the specified resource.
            </summary>
            <param name="resource">The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceWithEndpoints"/> which contains <see cref="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation"/> annotations.</param>
            <returns>An enumeration of <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/> based on the <see cref="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation"/> annotations from the resources' <see cref="P:Aspire.Hosting.ApplicationModel.IResource.Annotations"/> collection.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.GetEndpoint(Aspire.Hosting.ApplicationModel.IResourceWithEndpoints,System.String)">
            <summary>
            Gets an endpoint reference for the specified endpoint name.
            </summary>
            <param name="resource">The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceWithEndpoints"/> which contains <see cref="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation"/> annotations.</param>
            <param name="endpointName">The name of the endpoint.</param>
            <returns>An <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/> object representing the endpoint reference 
            for the specified endpoint.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetContainerImageName(Aspire.Hosting.ApplicationModel.IResource,System.String@)">
            <summary>
            Attempts to get the container image name from the given resource.
            </summary>
            <param name="resource">The resource to get the container image name from.</param>
            <param name="imageName">The container image name if found, otherwise null.</param>
            <returns>True if the container image name was found, otherwise false.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceExtensions.GetReplicaCount(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Gets the number of replicas for the specified resource. Defaults to <c>1</c> if no
            <see cref="T:Aspire.Hosting.ApplicationModel.ReplicaAnnotation" /> is found.
            </summary>
            <param name="resource">The resource to get the replica count for.</param>
            <returns>The number of replicas for the specified resource.</returns>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceLoggerService">
            <summary>
            A service that provides loggers for resources to write to.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.GetLogger(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Gets the logger for the resource to write to.
            </summary>
            <param name="resource">The resource name</param>
            <returns>An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> which represents the resource.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.GetLogger(System.String)">
            <summary>
            Gets the logger for the resource to write to.
            </summary>
            <param name="resourceName">The name of the resource from the Aspire application model.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> which represents the named resource.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.GetInternalLogger(System.String)">
            <summary>
            The internal logger is used when adding logs from resource's stream logs.
            It allows the parsed date from text to be used as the log line date.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.WatchAsync(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Watch for changes to the log stream for a resource.
            </summary>
            <param name="resource">The resource to watch for logs.</param>
            <returns>An async enumerable that returns the logs as they are written.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.WatchAsync(System.String)">
            <summary>
            Watch for changes to the log stream for a resource.
            </summary>
            <param name="resourceName">The resource name</param>
            <returns>An async enumerable that returns the logs as they are written.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.WatchAnySubscribersAsync(System.Threading.CancellationToken)">
            <summary>
            Watch for subscribers to the log stream for a resource.
            </summary>
            <returns>
            An async enumerable that returns when the first subscriber is added to a log,
            or when the last subscriber is removed.
            </returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.Complete(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Completes the log stream for the resource.
            </summary>
            <param name="resource">The <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/>.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.Complete(System.String)">
            <summary>
            Completes the log stream for the resource.
            </summary>
            <param name="name">The name of the resource.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.ClearBacklog(System.String)">
            <summary>
            Clears the log stream's backlog for the resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceLoggerService.ResourceLoggerState">
            <summary>
            A logger for the resource to write to.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.ResourceLoggerState.#ctor">
            <summary>
            Creates a new <see cref="T:Aspire.Hosting.ApplicationModel.ResourceLoggerService.ResourceLoggerState"/>.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.ResourceLoggerState.WatchAsync(System.Threading.CancellationToken)">
            <summary>
            Watch for changes to the log stream for a resource.
            </summary>
            <returns>The log stream for the resource.</returns>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourceLoggerService.ResourceLoggerState.Logger">
            <summary>
            The logger for the resource to write to. This will write updates to the live log stream for this resource.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceLoggerService.ResourceLoggerState.Complete">
            <summary>
            Close the log stream for the resource. Future subscribers will not receive any updates and will complete immediately.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.LogSubscriber">
            <summary>
            Represents a log subscriber for a resource.
            </summary>
            <param name="Name">The the resource name.</param>
            <param name="AnySubscribers">Determines if there are any subscribers.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.LogSubscriber.#ctor(System.String,System.Boolean)">
            <summary>
            Represents a log subscriber for a resource.
            </summary>
            <param name="Name">The the resource name.</param>
            <param name="AnySubscribers">Determines if there are any subscribers.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.LogSubscriber.Name">
            <summary>The the resource name.</summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.LogSubscriber.AnySubscribers">
            <summary>Determines if there are any subscribers.</summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceNotificationService">
            <summary>
            A service that allows publishing and subscribing to changes in the state of a resource.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceNotificationService.#ctor(Microsoft.Extensions.Logging.ILogger{Aspire.Hosting.ApplicationModel.ResourceNotificationService})">
            <summary>
            Creates a new instance of <see cref="T:Aspire.Hosting.ApplicationModel.ResourceNotificationService"/>.
            </summary>
            <remarks>
            Obsolete. Use the constructor that accepts an <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> and <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationLifetime"/>.<br/>
            This constructor will be removed in the next major version of Aspire.
            </remarks>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceNotificationService.#ctor(Microsoft.Extensions.Logging.ILogger{Aspire.Hosting.ApplicationModel.ResourceNotificationService},Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
            Creates a new instance of <see cref="T:Aspire.Hosting.ApplicationModel.ResourceNotificationService"/>.
            </summary>
            <param name="logger">The logger.</param>
            <param name="hostApplicationLifetime">The host application lifetime.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceNotificationService.WaitForResourceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Waits for a resource to reach the specified state. See <see cref="T:Aspire.Hosting.ApplicationModel.KnownResourceStates"/> for common states.
            </summary>
            <remarks>
            This method returns a task that will complete when the resource reaches the specified target state. If the resource
            is already in the target state, the method will return immediately.<br/>
            If the resource doesn't reach one of the target states before <paramref name="cancellationToken"/> is signaled, this method
            will throw <see cref="T:System.OperationCanceledException"/>.
            </remarks>
            <param name="resourceName">The name of the resource.</param>
            <param name="targetState"></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the wait operation.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceNotificationService.WaitForResourceAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Waits for a resource to reach one of the specified states. See <see cref="T:Aspire.Hosting.ApplicationModel.KnownResourceStates"/> for common states.
            </summary>
            <remarks>
            This method returns a task that will complete when the resource reaches one of the specified target states. If the resource
            is already in the target state, the method will return immediately.<br/>
            If the resource doesn't reach one of the target states before <paramref name="cancellationToken"/> is signaled, this method
            will throw <see cref="T:System.OperationCanceledException"/>.
            </remarks>
            <param name="resourceName">The name of the resource.</param>
            <param name="targetStates">The set of states to wait for the resource to transition to one of. See <see cref="T:Aspire.Hosting.ApplicationModel.KnownResourceStates"/> for common states.</param>
            <param name="cancellationToken">A cancellation token that cancels the wait operation when signaled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the wait operation and which of the target states the resource reached.</returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceNotificationService.WatchAsync(System.Threading.CancellationToken)">
            <summary>
            Watch for changes to the state for all resources.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceNotificationService.PublishUpdateAsync(Aspire.Hosting.ApplicationModel.IResource,System.String,System.Func{Aspire.Hosting.ApplicationModel.CustomResourceSnapshot,Aspire.Hosting.ApplicationModel.CustomResourceSnapshot})">
            <summary>
            Updates the snapshot of the <see cref="T:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot"/> for a resource.
            </summary>
            <param name="resource">The resource to update</param>
            <param name="resourceId"> The id of the resource.</param>
            <param name="stateFactory">A factory that creates the new state based on the previous state.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceNotificationService.PublishUpdateAsync(Aspire.Hosting.ApplicationModel.IResource,System.Func{Aspire.Hosting.ApplicationModel.CustomResourceSnapshot,Aspire.Hosting.ApplicationModel.CustomResourceSnapshot})">
            <summary>
            Updates the snapshot of the <see cref="T:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot"/> for a resource.
            </summary>
            <param name="resource">The resource to update</param>
            <param name="stateFactory">A factory that creates the new state based on the previous state.</param>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceNotificationService.ResourceNotificationState">
            <summary>
            The annotation that allows publishing and subscribing to changes in the state of a resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceEvent">
            <summary>
            Represents a change in the state of a resource.
            </summary>
            <param name="resource">The resource associated with the event.</param>
            <param name="resourceId">The unique id of the resource.</param>
            <param name="snapshot">The snapshot of the resource state.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceEvent.#ctor(Aspire.Hosting.ApplicationModel.IResource,System.String,Aspire.Hosting.ApplicationModel.CustomResourceSnapshot)">
            <summary>
            Represents a change in the state of a resource.
            </summary>
            <param name="resource">The resource associated with the event.</param>
            <param name="resourceId">The unique id of the resource.</param>
            <param name="snapshot">The snapshot of the resource state.</param>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourceEvent.Resource">
            <summary>
            The resource associated with the event.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourceEvent.ResourceId">
            <summary>
            The unique id of the resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourceEvent.Snapshot">
            <summary>
            The snapshot of the resource state.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.ResourceSnapshotAnnotation">
            <summary>
            An annotation that represents the initial snapshot of a resource.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.ResourceSnapshotAnnotation.#ctor(Aspire.Hosting.ApplicationModel.CustomResourceSnapshot)">
            <summary>
            An annotation that represents the initial snapshot of a resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ApplicationModel.ResourceSnapshotAnnotation.InitialSnapshot">
            <summary>
            The initial snapshot of the resource.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ApplicationModel.UserSecretsParameterDefault">
            <summary>
            Wraps a <see cref="T:Aspire.Hosting.ApplicationModel.ParameterDefault"/> such that the default value is saved to the project's user secrets store.
            </summary>
            <param name="appHostAssembly">The app host assembly.</param>
            <param name="applicationName">The application name.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="parameterDefault">The <see cref="T:Aspire.Hosting.ApplicationModel.ParameterDefault"/> that will produce the default value when it isn't found in the project's user secrets store.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.UserSecretsParameterDefault.#ctor(System.Reflection.Assembly,System.String,System.String,Aspire.Hosting.ApplicationModel.ParameterDefault)">
            <summary>
            Wraps a <see cref="T:Aspire.Hosting.ApplicationModel.ParameterDefault"/> such that the default value is saved to the project's user secrets store.
            </summary>
            <param name="appHostAssembly">The app host assembly.</param>
            <param name="applicationName">The application name.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="parameterDefault">The <see cref="T:Aspire.Hosting.ApplicationModel.ParameterDefault"/> that will produce the default value when it isn't found in the project's user secrets store.</param>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.UserSecretsParameterDefault.GetDefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:Aspire.Hosting.ApplicationModel.UserSecretsParameterDefault.WriteToManifest(Aspire.Hosting.Publishing.ManifestPublishingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Aspire.Hosting.IResourceWithServiceDiscovery">
            <summary>
            A resource that supports exporting service discovery information.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ContainerResourceBuilderExtensions">
            <summary>
            Provides extension methods for <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> to add container resources to the application.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.AddContainer(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)">
            <summary>
            Adds a container resource to the application. Uses the "latest" tag.
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource.</param>
            <param name="image">The container image name. The tag is assumed to be "latest".</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/> for chaining.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.AddContainer(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String,System.String)">
            <summary>
            Adds a container resource to the application.
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource.</param>
            <param name="image">The container image name.</param>
            <param name="tag">The container image tag.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/> for chaining.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithVolume``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.Boolean)">
            <summary>
            Adds a volume to a container resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="name">The name of the volume.</param>
            <param name="target">The target path where the volume is mounted in the container.</param>
            <param name="isReadOnly">A flag that indicates if the volume should be mounted as read-only.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithVolume``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)">
            <summary>
            Adds an anonymous volume to a container resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="target">The target path where the volume is mounted in the container.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBindMount``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.Boolean)">
            <summary>
            Adds a bind mount to a container resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="source">The source path of the mount. This is the path to the file or directory on the host.</param>
            <param name="target">The target path where the file or directory is mounted in the container.</param>
            <param name="isReadOnly">A flag that indicates if this is a read-only mount.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithEntrypoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)">
            <summary>
            Sets the Entrypoint for the container.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="entrypoint">The new entrypoint for the container.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithImageTag``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)">
            <summary>
            Allows overriding the image tag on a container.
            </summary>
            <typeparam name="T">Type of container resource.</typeparam>
            <param name="builder">Builder for the container resource.</param>
            <param name="tag">Tag value.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithImageRegistry``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)">
            <summary>
            Allows overriding the image registry on a container.
            </summary>
            <typeparam name="T">Type of container resource.</typeparam>
            <param name="builder">Builder for the container resource.</param>
            <param name="registry">Registry value.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithImage``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String)">
            <summary>
            Allows overriding the image on a container.
            </summary>
            <typeparam name="T">Type of container resource.</typeparam>
            <param name="builder">Builder for the container resource.</param>
            <param name="image">Image value.</param>
            <param name="tag">Tag value.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithImageSHA256``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)">
            <summary>
            Allows setting the image to a specific sha256 on a container.
            </summary>
            <typeparam name="T">Type of container resource.</typeparam>
            <param name="builder">Builder for the container resource.</param>
            <param name="sha256">Registry value.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithContainerRuntimeArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String[])">
            <summary>
            Adds a callback to be executed with a list of arguments to add to the container runtime run command when a container resource is started.
            </summary>
            <remarks>
            This is intended to pass additional arguments to the underlying container runtime run command to enable advanced features such as exposing GPUs to the container. To pass runtime arguments to the actual container, use the <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.WithArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String[])"/> method.
            </remarks>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">Builder for the container resource.</param>
            <param name="args">The arguments to be passed to the container runtime run command when the container resource is started.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithContainerRuntimeArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Action{Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackContext})">
            <summary>
            Adds a callback to be executed with a list of arguments to add to the container runtime run command when a container resource is started.
            </summary>
            <remarks>
            This is intended to pass additional arguments to the underlying container runtime run command to enable advanced features such as exposing GPUs to the container. To pass runtime arguments to the actual container, use the <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.WithArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Action{Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext})"/> method.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="builder">Builder for the container resource.</param>
            <param name="callback">A callback that allows for deferred execution for computing arguments. This runs after resources have been allocation by the orchestrator and allows access to other resources to resolve computed data, e.g. connection strings, ports.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithContainerRuntimeArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Func{Aspire.Hosting.ApplicationModel.ContainerRuntimeArgsCallbackContext,System.Threading.Tasks.Task})">
            <summary>
            Adds a callback to be executed with a list of arguments to add to the container runtime run command when a container resource is started.
            </summary>
            <remarks>
            This is intended to pass additional arguments to the underlying container runtime run command to enable advanced features such as exposing GPUs to the container. To pass runtime arguments to the actual container, use the <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.WithArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Func{Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext,System.Threading.Tasks.Task})"/> method.
            </remarks>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">Builder for the container resource.</param>
            <param name="callback">A callback that allows for deferred execution for computing arguments. This runs after resources have been allocation by the orchestrator and allows access to other resources to resolve computed data, e.g. connection strings, ports.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.PublishAsContainer``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0})">
            <summary>
            Changes the resource to be published as a container in the manifest.
            </summary>
            <param name="builder">Resource builder.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.String)">
            <summary>
            Causes .NET Aspire to build the specified container image from a Dockerfile.
            </summary>
            <typeparam name="T">Type parameter specifying any type derived from <see cref="T:Aspire.Hosting.ApplicationModel.ContainerResource"/>/</typeparam>
            <param name="builder">The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</param>
            <param name="contextPath">Path to be used as the context for the container image build.</param>
            <param name="dockerfilePath">Override path for the Dockerfile if it is not in the <paramref name="contextPath"/>.</param>
            <param name="stage">The stage representing the image to be published in a multi-stage Dockerfile.</param>
            <returns>A <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            When this method is called an annotation is added to the <see cref="T:Aspire.Hosting.ApplicationModel.ContainerResource"/> that specifies the context path and
            Dockerfile path to be used when building the container image. These details are then used by the orchestrator to build the image
            before using that image to start the container.
            </para>
            <para>
            Both the <paramref name="contextPath"/> and <paramref name="dockerfilePath"/> are relative to the AppHost directory unless
            they are fully qualified. If the <paramref name="dockerfilePath"/> is not provided, the path is assumed to be Dockerfile relative
            to the <paramref name="contextPath"/>.
            </para>
            <para>
            When generating the manifest for deployment tools, the <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.String)"/>
            method results in an additional attribute being added to the `container.v0` resource type which contains the configuration
            necessary to allow the deployment tool to build the container image prior to deployment.
            </para>
            </remarks>
            <example>
            Creates a container called <c>mycontainer</c> with an image called <c>myimage</c>.
            <code language="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.AddContainer("mycontainer", "myimage")
                   .WithDockerfile("path/to/context");
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.AddDockerfile(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a Dockerfile to the application model that can be treated like a container resource.
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource.</param>
            <param name="contextPath">Path to be used as the context for the container image build.</param>
            <param name="dockerfilePath">Override path for the Dockerfile if it is not in the <paramref name="contextPath"/>.</param>
            <param name="stage">The stage representing the image to be published in a multi-stage Dockerfile.</param>
            <returns>A <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            Both the <paramref name="contextPath"/> and <paramref name="dockerfilePath"/> are relative to the AppHost directory unless
            they are fully qualified. If the <paramref name="dockerfilePath"/> is not provided, the path is assumed to be Dockerfile relative
            to the <paramref name="contextPath"/>.
            </para>
            <para>
            When generating the manifest for deployment tools, the <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.AddDockerfile(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String,System.String,System.String)"/>
            method results in an additional attribute being added to the `container.v1` resource type which contains the configuration
            necessary to allow the deployment tool to build the container image prior to deployment.
            </para>
            </remarks>
            <example>
            Creates a container called <c>mycontainer</c> based on a Dockerfile in the context path <c>path/to/context</c>.
            <code language="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.AddDockerfile("mycontainer", "path/to/context");
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.Object)">
            <summary>
            Adds a build argument when the container is build from a Dockerfile.
            </summary>
            <typeparam name="T">The type of container resoruce.</typeparam>
            <param name="builder">The resource builder for the container resource.</param>
            <param name="name">The name of the build argument.</param>
            <param name="value">The value of the build argument.</param>
            <returns>The resource builder for the container resource.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.Object)"/> is
            called before <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.String)"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.Object)"/> extension method
            adds an additional build argument the container resource to be used when the image is built. This method must be called after
            <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.String)"/>.
            </para>
            </remarks>
            <example>
            Adding a static build argument.
            <code language="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            builder.AddContainer("mycontainer", "myimage")
                   .WithDockerfile("../mycontainer")
                   .WithBuildArg("CUSTOM_BRANDING", "/app/static/branding/custom");
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ParameterResource})">
            <summary>
            Adds a build argument when the container is built from a Dockerfile.
            </summary>
            <typeparam name="T">The type of container resoruce.</typeparam>
            <param name="builder">The resource builder for the container resource.</param>
            <param name="name">The name of the build argument.</param>
            <param name="value">The resource builder for a parameter resource.</param>
            <returns>The resource builder for the container resource.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ParameterResource})"/> is
            called before <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.String)"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ParameterResource})"/> extension method
            adds an additional build argument the container resource to be used when the image is built. This method must be called after
            <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.String)"/>.
            </para>
            </remarks>
            <example>
            Adding a build argument based on a parameter..
            <code language="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            var branding = builder.AddParameter("branding");
            builder.AddContainer("mycontainer", "myimage")
                   .WithDockerfile("../mycontainer")
                   .WithBuildArg("CUSTOM_BRANDING", branding);
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildSecret``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ParameterResource})">
            <summary>
            Adds a secret build argument when the container is built from a Dockerfile.
            </summary>
            <typeparam name="T">The type of container resoruce.</typeparam>
            <param name="builder">The resource builder for the container resource.</param>
            <param name="name">The name of the secret build argument.</param>
            <param name="value">The resource builder for a parameter resource.</param>
            <returns>The resource builder for the container resource.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildSecret``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ParameterResource})"/> is
            called before <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String,System.String)"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildSecret``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ParameterResource})"/> extension method
            results in a <c>--secret</c> argument being appended to the <c>docker build</c> or <c>podman build</c> command. This overload results in an environment
            variable-based secret being passed to the build process. The value of the environment variable is the value of the secret referenced by the <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/>.
            </para>
            </remarks>
            <example>
            Adding a build secret based on a parameter.
            <code language="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            var accessToken = builder.AddParameter("accessToken", secret: true);
            builder.AddContainer("mycontainer", "myimage")
                   .WithDockerfile("../mycontainer")
                   .WithBuildSecret("ACCESS_TOKEN", accessToken);
            </code>
            </example>
        </member>
        <member name="T:Aspire.Hosting.ContainerResourceExtensions">
            <summary>
            Provides extension methods for working with container resources in a distributed application model.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceExtensions.GetContainerResources(Aspire.Hosting.ApplicationModel.DistributedApplicationModel)">
            <summary>
            Returns a collection of container resources in the specified distributed application model.
            </summary>
            <param name="model">The distributed application model to search for container resources.</param>
            <returns>A collection of container resources in the specified distributed application model.</returns>
        </member>
        <member name="M:Aspire.Hosting.ContainerResourceExtensions.IsContainer(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Determines whether the specified resource is a container resource.
            </summary>
            <param name="resource">The resource to check.</param>
            <returns>true if the specified resource is a container resource; otherwise, false.</returns>
        </member>
        <member name="T:Aspire.Hosting.CustomResourceExtensions">
            <summary>
            Extension methods for applying dashboard annotations to resources.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.CustomResourceExtensions.WithInitialState``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},Aspire.Hosting.ApplicationModel.CustomResourceSnapshot)">
            <summary>
            Initializes the resource with the initial snapshot.
            </summary>
            <typeparam name="TResource">The resource.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="initialSnapshot">The factory to create the initial <see cref="T:Aspire.Hosting.ApplicationModel.CustomResourceSnapshot"/> for this resource.</param>
            <returns>The resource builder.</returns>
        </member>
        <member name="P:Aspire.Hosting.Dashboard.DashboardLogMessageContext.DashboardLogMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dashboard.DashboardLogMessageContext.LogLevel">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dashboard.DashboardLogMessageContext.JsonObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dashboard.DashboardLogMessageContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dashboard.DashboardLogMessageContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dashboard.DashboardLogMessageContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dashboard.DashboardLogMessageContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.DashboardLogMessageContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.DashboardLogMessageContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.DashboardLogMessageContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Aspire.Hosting.Dashboard.DashboardService">
            <summary>
            Implements a gRPC service that a dashboard can consume.
            </summary>
            <remarks>
            An instance of this type is created for every gRPC service call, so it may not hold onto any state
            required beyond a single request. Longer-scoped data is stored in <see cref="T:Aspire.Hosting.Dashboard.DashboardServiceData"/>.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.DashboardService.#ctor(Aspire.Hosting.Dashboard.DashboardServiceData,Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
            Implements a gRPC service that a dashboard can consume.
            </summary>
            <remarks>
            An instance of this type is created for every gRPC service call, so it may not hold onto any state
            required beyond a single request. Longer-scoped data is stored in <see cref="T:Aspire.Hosting.Dashboard.DashboardServiceData"/>.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.DashboardService.ApplicationNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;name&gt;.+?)\\.?AppHost$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.ExplicitCapture | RegexOptions.Singleline | RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "name" capture group.<br/>
                ○ Match any character lazily at least once.<br/>
            ○ Match '.' atomically, optionally.<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Pp] exactly 2 times.<br/>
            ○ Match a character in the set [Hh].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Aspire.Hosting.Dashboard.DashboardServiceData">
            <summary>
            Models the state for <see cref="T:Aspire.Hosting.Dashboard.DashboardService"/>, as that service is constructed
            for each gRPC request. This long-lived object holds state across requests.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Dashboard.DashboardServiceHost">
            <summary>
            Hosts a gRPC service via <see cref="T:Aspire.Hosting.Dashboard.DashboardService"/> (aka the "Resource Service") that a dashboard can connect to.
            Configures DI and networking options for the service.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.Dashboard.DashboardServiceHost.ResourceServiceUrlVariableName">
            <summary>
            Name of the environment variable that optionally specifies the resource service URL,
            which the dashboard will connect to over gRPC.
            </summary>
            <remarks>
            This is primarily intended for cases outside of the local developer environment.
            If no value exists for this variable, a port is assigned dynamically.
            </remarks>
        </member>
        <member name="F:Aspire.Hosting.Dashboard.DashboardServiceHost._resourceServiceUri">
            <summary>
            Provides access to the URI at which the resource service endpoint is hosted.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.Dashboard.DashboardServiceHost._app">
            <summary>
            <see langword="null"/> if <see cref="P:Aspire.Hosting.DistributedApplicationOptions.DashboardEnabled"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.DashboardServiceHost.GetResourceServiceUriAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the URI upon which the resource service is listening.
            </summary>
            <remarks>
            Intended to be used by the app model when launching the dashboard process, populating its
            <c>DOTNET_RESOURCE_SERVICE_ENDPOINT_URL</c> environment variable with a single URI.
            </remarks>
        </member>
        <member name="T:Aspire.Hosting.Dashboard.ResourcePublisher">
            <summary>
            Builds a collection of resources by integrating incoming resource changes,
            and allowing multiple subscribers to receive the current resource collection
            snapshot and future updates.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.ResourcePublisher.#ctor(System.Threading.CancellationToken)">
            <summary>
            Builds a collection of resources by integrating incoming resource changes,
            and allowing multiple subscribers to receive the current resource collection
            snapshot and future updates.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Dashboard.ResourcePublisher.IntegrateAsync(Aspire.Hosting.Dashboard.ResourceSnapshot,Aspire.Hosting.Dashboard.ResourceSnapshotChangeType)">
            <summary>
            Integrates a changed resource within the cache, and broadcasts the update to any subscribers.
            </summary>
            <param name="resource">The resource that was modified.</param>
            <param name="changeType">The change type (Added, Modified, Deleted).</param>
            <returns>A task that completes when the cache has been updated and all subscribers notified.</returns>
        </member>
        <member name="F:Aspire.Hosting.Dashboard.ResourceSnapshotChangeType.Upsert">
            <summary>
            The object was added if new, or updated if not.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.Dashboard.ResourceSnapshotChangeType.Delete">
            <summary>
            The object was deleted.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Dcp.DcpDependencyCheck.VersionRegex">
            <remarks>
            Pattern:<br/>
            <code>[^\\d\\.].*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^.\d].<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.Dcp.DcpKubernetesClient.ReadSubResourceAsStreamAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a sub-resource from a Kubernetes resource as a stream.
            </summary>
            <param name="group">The API group of the Kubernetes resource.</param>
            <param name="version">The API version of the Kubernetes resource.</param>
            <param name="plural">The plural name (API kind) of the Kubernetes resource, e.g. "executables".</param>
            <param name="name">The name of the Kubernetes resource to use for sub-resource read operation.</param>
            <param name="subResource">The sub-resource to read from the Kubernetes resource.</param>
            <param name="namespaceParameter">The namespace of the Kubernetes resource.
            If null or empty, the resource is assumed to be non-namespaced.</param>
            <param name="queryParams">Optional query parameters to append to the request URL.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.CliPath">
            <summary>
            The path to the DCP executable used for Aspire orchestration
            </summary>
            <example>
            C:\Program Files\dotnet\packs\Aspire.Hosting.Orchestration.win-x64\8.0.0-preview.1.23518.6\tools\dcp.exe
            </example>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.ExtensionsPath">
            <summary>
            Optional path to a folder containing the DCP extension assemblies (dcpctrl, etc.).
            </summary>
            <example>
            C:\Program Files\dotnet\packs\Aspire.Hosting.Orchestration.win-x64\8.0.0-preview.1.23518.6\tools\ext\
            </example>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.DashboardPath">
            <summary>
            Optional path to a folder containing the Aspire Dashboard binaries.
            </summary>
            <example>
            When running the playground applications in this repo: <c>..\..\..\artifacts\bin\Aspire.Dashboard\Debug\net8.0\Aspire.Dashboard.dll</c>
            </example>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.BinPath">
            <summary>
            Optional path to a folder containing additional DCP binaries.
            </summary>
            <example>
            C:\Program Files\dotnet\packs\Aspire.Hosting.Orchestration.win-x64\8.0.0-preview.1.23518.6\tools\ext\bin\
            </example>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.ContainerRuntime">
            <summary>
            Optional container runtime to override default runtime for DCP containers.
            </summary>
            <example>
            podman
            </example>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.DependencyCheckTimeout">
            <summary>
            How long the dependency check will wait (in seconds) for a response before timing out.
            Timeout is disabled if set to zero or a negative value.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.ResourceNameSuffix">
            <summary>
            The suffix to use for resource names when creating resources in DCP.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.DeleteResourcesOnShutdown">
            <summary>
            Whether to delete resources created by this application when the application is shut down.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Dcp.DcpOptions.RandomizePorts">
            <summary>
            Whether to randomize ports used by resources during orchestration.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.Dcp.DcpVersion.Dev">
            <summary>
            Development build version proxy, considered always "current" and supporting latest features. 
            </summary>
        </member>
        <member name="T:Aspire.Hosting.DistributedApplication">
             <summary>
             Represents a distributed application that implements the <see cref="T:Microsoft.Extensions.Hosting.IHost"/> and <see cref="T:System.IAsyncDisposable"/> interfaces.
             </summary>
             <remarks>
             <para>
             The <see cref="T:Aspire.Hosting.DistributedApplication"/> is an implementation of the <see cref="T:Microsoft.Extensions.Hosting.IHost"/> interface that orchestrates
             a .NET Aspire application. To build an instance of the <see cref="T:Aspire.Hosting.DistributedApplication"/> class, use the
             <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder"/> method to create an instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>
             interface. Using the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface you can configure the resources
             that comprise the distributed application and describe the dependencies between them.
             </para>
             <para>
             Once the distributed application has been defined use the <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.Build"/> method
             to create an instance of the <see cref="T:Aspire.Hosting.DistributedApplication"/> class. The <see cref="T:Aspire.Hosting.DistributedApplication"/> class
             exposes a <see cref="M:Aspire.Hosting.DistributedApplication.Run"/> method which then starts the distributed application and its
             resources.
             </para>
             <para>
             The <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(Aspire.Hosting.DistributedApplicationOptions)"/> method provides additional options for
             constructing the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> including disabling the .NET Aspire dashboard (see <see cref="P:Aspire.Hosting.DistributedApplicationOptions.DisableDashboard"/>) or
             allowing unsecured communication between the browser and dashboard, and dashboard and app host (see <see cref="P:Aspire.Hosting.DistributedApplicationOptions.AllowUnsecuredTransport"/>.
             </para>
             </remarks>
             <example>
             The following example shows creating a PostgreSQL server resource with a database and referencing that
             database in a .NET project.
             <code lang="csharp">
             var builder = DistributedApplication.CreateBuilder(args);
             var inventoryDatabase = builder.AddPostgres("mypostgres").AddDatabase("inventory");
             builder.AddProject&lt;Projects.InventoryService&gt;()
                    .WithReference(inventoryDatabase);
            
             builder.Build().Run();
             </code>
             </example>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.#ctor(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.DistributedApplication"/> class.
            </summary>
            <param name="host">The <see cref="T:Microsoft.Extensions.Hosting.IHost"/> instance.</param>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.CreateBuilder">
             <summary>
             Creates a new instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface.
             </summary>
             <returns>A new instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface.</returns>
             <remarks>
             This overload of the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder"/> method should only be
             used when the app host is not intended to be used with a deployment tool. Because no arguments are
             passed to the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder"/> method the app host has no
             way to be put into publish mode. Refer to <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/> or <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(Aspire.Hosting.DistributedApplicationOptions)"/>
             when more control is needed over the behavior of the distributed application at runtime.
             </remarks>
             <example>
             The following example is creating a Postgres server resource with a database and referencing that
             database in a .NET project.
             <code lang="csharp">
             var builder = DistributedApplication.CreateBuilder();
             var inventoryDatabase = builder.AddPostgres("mypostgres").AddDatabase("inventory");
             builder.AddProject&lt;Projects.InventoryService&gt;()
                    .WithReference(inventoryDatabase);
            
             builder.Build().Run();
             </code>
             </example>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])">
             <summary>
             Creates a new instance of <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> with the specified command-line arguments.
             </summary>
             <param name="args">The command-line arguments to use when building the distributed application.</param>
             <returns>A new instance of <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</returns>
             <remarks>
             <para>
             The <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/> method is the most common way to
             create an instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface. Typically this
             method will be called as a top-level statement in the application's entry-point.
             </para>
             <para>
             Note that the <paramref name="args"/> parameter is a <see langword="string"/> is essential in allowing the application
             host to work with deployment tools because arguments are used to tell the application host that it
             is in publish mode. If <paramref name="args"/> is not provided the application will not work with
             deployment tools. It is also possible to provide arguments using the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(Aspire.Hosting.DistributedApplicationOptions)"/>
             overload of this method.
             </para>
             <example>
             The following example shows creating a Postgres server resource with a database and referencing that
             database in a .NET project.
             <code lang="csharp">
             var builder = DistributedApplication.CreateBuilder(args);
             var inventoryDatabase = builder.AddPostgres("mypostgres").AddDatabase("inventory");
             builder.AddProject&lt;Projects.InventoryService&gt;()
                    .WithReference(inventoryDatabase);
            
             builder.Build().Run();
             </code>
             </example>
             <example>
             The following example is equivalent to the previous example except that it does not use top-level statements.
             <code lang="csharp">
             public class Program
             {
                 public static void Main(string[] args)
                 {
                     var builder = DistributedApplication.CreateBuilder(args);
                     var inventoryDatabase = builder.AddPostgres("mypostgres").AddDatabase("inventory");
                     builder.AddProject&lt;Projects.InventoryService&gt;()
                            .WithReference(inventoryDatabase);
            
                     builder.Build().Run();
                 }
             }
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.CreateBuilder(Aspire.Hosting.DistributedApplicationOptions)">
             <summary>
             Creates a new instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface with the specified <paramref name="options"/>.
             </summary>
             <param name="options">The <see cref="T:Aspire.Hosting.DistributedApplicationOptions"/> to use for configuring the builder.</param>
             <returns>A new instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface.</returns>
             <remarks>
             <para>
             The <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(Aspire.Hosting.DistributedApplicationOptions)"/> method provides
             greater control over the behavior of the distributed application at runtime. For example using providing
             a <paramref name="options"/> argument allows developers to force all container images to be loaded
             from a specified container registry by using the <see cref="P:Aspire.Hosting.DistributedApplicationOptions.ContainerRegistryOverride"/>
             property, or disable the dashboard by using the <see cref="P:Aspire.Hosting.DistributedApplicationOptions.DisableDashboard"/>
             property. Refer to the <see cref="T:Aspire.Hosting.DistributedApplicationOptions"/> class for more details on
             each option that may be provided.
             </para>
             <para>
             When supplying a custom <see cref="T:Aspire.Hosting.DistributedApplicationOptions"/> it is commended to populate the
             <see cref="P:Aspire.Hosting.DistributedApplicationOptions.Args"/> property to ensure that the app host continues to function
             correctly when used with deployment tools that need to enable publish mode.
             </para>
             </remarks>
             <example>
             Override the container registry used by the distributed application.
             <code lang="csharp">
             var options = new DistributedApplicationOptions
             {
                 Args = args; // Important for deployment tools
                 ContainerRegistryOverride = "registry.example.com"
             };
             var builder = DistributedApplication.CreateBuilder(options);
             var inventoryDatabase = builder.AddPostgres("mypostgres").AddDatabase("inventory");
             builder.AddProject&lt;Projects.InventoryService&gt;()
                    .WithReference(inventoryDatabase);
            
             builder.Build().Run();
             </code>
             </example>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplication.Services">
            <summary>
            Gets the <see cref="T:System.IServiceProvider"/> instance configured for the application.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Aspire.Hosting.DistributedApplication"/> is an <see cref="T:Microsoft.Extensions.Hosting.IHost"/> implementation and as such
            exposes a <see cref="P:Aspire.Hosting.DistributedApplication.Services"/> property which allows developers to get services from the
            dependency injection container after <see cref="T:Aspire.Hosting.DistributedApplication" /> instance has been
            built using the <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.Build"/> method.
            </para>
            <para>
            To add services to the dependency injection container developers should use the <see cref="P:Aspire.Hosting.IDistributedApplicationBuilder.Services"/>
            property to access the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.Dispose">
            <summary>
            Disposes the distributed application by disposing the <see cref="T:Microsoft.Extensions.Hosting.IHost"/>.
            </summary>
            <remarks>
            <para>
            Typically developers do not need to worry about calling the Dispose method on the <see cref="T:Aspire.Hosting.DistributedApplication"/>
            instance because it is typically used in the entry point of the application and all resources
            used by the application are destroyed when the application exists.
            </para>
            <para>
            If you are using the <see cref="T:Aspire.Hosting.DistributedApplication"/> and <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> inside
            unit test code then you should correctly dispose of the <see cref="T:Aspire.Hosting.DistributedApplication"/> instance. This is
            because the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder" /> instance initializes configuration providers which
            make use of file watchers which are a finite resource.
            </para>
            <para>
            Without disposing of the <see cref="T:Aspire.Hosting.DistributedApplication"/>
            correctly projects with a large number of functional/integration tests may see a "The configured user limit (128) on
            the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors
            has been reached." error.
            </para>
            <para>
            Refer to the <see href="https://aka.ms/dotnet/aspire/testing" >.NET Aspire testing page</see> for more information
            on how to use .NET Aspire APIs for functional an integrating testing.
            </para>
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.DisposeAsync">
            <summary>
            Asynchronously disposes the distributed application by disposing the <see cref="T:Microsoft.Extensions.Hosting.IHost"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the asynchronous operation.</returns>
            <remarks>
            <para>
            Typically developers do not need to worry about calling the Dispose method on the <see cref="T:Aspire.Hosting.DistributedApplication"/>
            instance because it is typically used in the entry point of the application and all resources
            used by the application are destroyed when the application exists.
            </para>
            <para>
            If you are using the <see cref="T:Aspire.Hosting.DistributedApplication"/> and <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> inside
            unit test code then you should correctly dispose of the <see cref="T:Aspire.Hosting.DistributedApplication"/> instance. This is
            because the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder" /> instance initializes configuration providers which
            make use of file watchers which are a finite resource.
            </para>
            <para>
            Without disposing of the <see cref="T:Aspire.Hosting.DistributedApplication"/>
            correctly projects with a large number of functional/integration tests may see a "The configured user limit (128) on
            the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors
            has been reached." error.
            </para>
            <para>
            Refer to the <see href="https://aka.ms/dotnet/aspire/testing" >.NET Aspire testing page</see> for more information
            on how to use .NET Aspire APIs for functional an integrating testing.
            </para>
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.Extensions.Hosting.IHost.StartAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.Extensions.Hosting.IHost.StopAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs an application and returns a Task that only completes when the token is triggered or shutdown is
            triggered and all <see cref="T:Microsoft.Extensions.Hosting.IHostedService" /> instances are stopped.
            </summary>
            <param name="cancellationToken">The token to trigger shutdown.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            <para>
            When the .NET Aspire app host is launched via <see cref="M:Aspire.Hosting.DistributedApplication.RunAsync(System.Threading.CancellationToken)"/> there are
            two possible modes that it is running in:
            </para>
            <list type="number">
            <item>Run mode; in run mode the app host runs until a shutdown of the app is triggered
            either by the users pressing <c>Ctrl-C</c>, the debugger detaching, or the browser associated
            with the dashboard being closed.</item>
            <item>Publish mode; in publish mode the app host runs just long enough to generate a
            manifest file that is used by deployment tool.</item>
            </list>
            <para>
            Developers extending the .NET Aspire application model should consider the lifetime
            of <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/> instances which are added to the dependency injection
            container. For more information on determining the mode that the app host is running
            in refer to <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext" />.
            </para>
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplication.Run">
            <summary>
            Runs an application and blocks the calling thread until host shutdown is triggered and all
            <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/> instances are stopped.
            </summary>
            <remarks>
            <para>
            When the .NET Aspire app host is launched via <see cref="M:Aspire.Hosting.DistributedApplication.RunAsync(System.Threading.CancellationToken)"/> there are
            two possible modes that it is running in:
            </para>
            <list type="number">
            <item>Run mode; in run mode the app host runs until a shutdown of the app is triggered
            either by the users pressing <c>Ctrl-C</c>, the debugger detaching, or the browser associated
            with the dashboard being closed.</item>
            <item>Publish mode; in publish mode the app host runs just long enough to generate a
            manifest file that is used by deployment tool.</item>
            </list>
            <para>
            Developers extending the .NET Aspire application model should consider the lifetime
            of <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/> instances which are added to the dependency injection
            container. For more information on determining the mode that the app host is running
            in refer to <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext" />.
            </para>
            </remarks>
        </member>
        <member name="T:Aspire.Hosting.DistributedApplicationBuilder">
            <summary>
            A builder for creating instances of <see cref="T:Aspire.Hosting.DistributedApplication"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Aspire.Hosting.DistributedApplicationBuilder"/> is the primary implementation of
            <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> within .NET Aspire. Typically a developer
            would interact with instances of this class via the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>
            interface which was created using one of the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/>
            overloads.
            </para>
            <para>
            For more information on how to configure the <see cref="T:Aspire.Hosting.DistributedApplication" /> using the
            the builder pattern see <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder" />.
            </para>
            </remarks>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.Environment">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.Configuration">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.Services">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.AppHostDirectory">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.AppHostAssembly">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.ExecutionContext">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.Resources">
            <inheritdoc />
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationBuilder.Eventing">
            <inheritdoc />
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationBuilder.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.DistributedApplicationBuilder"/> class with the specified options.
            </summary>
            <param name="args">The arguments provided to the builder.</param>
            <remarks>
            <para>
            Developers will not typically construct an instance of the <see cref="T:Aspire.Hosting.DistributedApplicationBuilder"/>
            class themselves and will instead use the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/>.
            This constructor is public to allow for some testing around extensibility scenarios.
            </para>
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationBuilder.#ctor(Aspire.Hosting.DistributedApplicationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.DistributedApplicationBuilder"/> class with the specified options.
            </summary>
            <param name="options">The options for the distributed application.</param>
            <remarks>
            <para>
            Developers will not typically construct an instance of the <see cref="T:Aspire.Hosting.DistributedApplicationBuilder"/>
            class themselves and will instead use the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/>.
            This constructor is public to allow for some testing around extensibility scenarios.
            </para>
            <para>
            This constructor generates an instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface
            which is very similar to the instance that is returned from <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/>
            however it is not guaranteed to be 100% consistent. For typical usage it is recommended that the
            <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/> method is to create instances of
            the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface.
            </para>
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationBuilder.AddResource``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationBuilder.CreateResourceBuilder``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:Aspire.Hosting.DistributedApplicationException">
            <summary>
            Represents an exception that is thrown when a distributed application error occurs.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.DistributedApplicationException"/> class.
            This represents an exception that is thrown when a distributed application error occurs.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.DistributedApplicationException"/> class, 
            given the <paramref name="message"/>. This represents an exception that is thrown when 
            a distributed application error occurs.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspire.Hosting.DistributedApplicationException"/> class, 
            given the <paramref name="message"/> and <paramref name="inner"/> exception. This 
            represents an exception that is thrown when a distributed application error occurs.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Aspire.Hosting.DistributedApplicationExecutionContext">
            <summary>
            Exposes the global contextual information for this invocation of the AppHost.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationExecutionContext.#ctor(Aspire.Hosting.DistributedApplicationOperation)">
            <summary>
            Constructs a <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext" /> without a callback to retrieve the <see cref="T:System.IServiceProvider" />.
            </summary>
            <param name="operation">The operation being performed in this invocation of the AppHost.</param>
            <remarks>
            This constructor is used for internal testing purposes.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationExecutionContext.#ctor(Aspire.Hosting.DistributedApplicationExecutionContextOptions)">
            <summary>
            Constructs a <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext" /> with a callback to retrieve the <see cref="T:System.IServiceProvider" />.
            </summary>
            <param name="options">Options for <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext"/>.</param>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationExecutionContext.Operation">
            <summary>
            The operation currently being performed by the AppHost.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationExecutionContext.ServiceProvider">
            <summary>
            The <see cref="T:System.IServiceProvider"/> for the AppHost.
            </summary>
            <exception cref="T:System.InvalidOperationException" accessor="get">Thrown when the <see cref="T:System.IServiceProvider"/> is not available.</exception>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationExecutionContext.IsPublishMode">
            <summary>
            Returns true if the current operation is publishing.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationExecutionContext.IsRunMode">
            <summary>
            Returns true if the current operation is running.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.DistributedApplicationExecutionContextOptions">
            <summary>
            Configuration options and references that need to be exposed to the <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext"/>.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationExecutionContextOptions.#ctor(Aspire.Hosting.DistributedApplicationOperation)">
            <summary>
            Configuration options and references that need to be exposed to the <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext"/>.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationExecutionContextOptions.ServiceProvider">
            <summary>
            The <see cref="T:System.IServiceProvider"/> for the AppHost.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationExecutionContextOptions.Operation">
            <summary>
            The operation currently being performed by the AppHost.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.DistributedApplicationOperation">
            <summary>
            Describes the context in which the AppHost is being executed.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.DistributedApplicationOperation.Run">
            <summary>
            AppHost is being run for the purpose of debugging locally.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.DistributedApplicationOperation.Publish">
            <summary>
            AppHost is being run for the purpose of publishing a manifest for deployment.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.DistributedApplicationOptions">
            <summary>
            Options for configuring the behavior of <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(Aspire.Hosting.DistributedApplicationOptions)"/>.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationOptions.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Aspire.Hosting.DistributedApplicationOptions"/>.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationOptions.ContainerRegistryOverride">
            <summary>
            When containers are used, use this value instead to override the container registry
            that is specified.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationOptions.Args">
            <summary>
            The command line arguments.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationOptions.AssemblyName">
            <summary>
            The AssemblyName of the AppHost project for loading configuration attributes; if not set defaults to Assembly.GetEntryAssembly().
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationOptions.DisableDashboard">
            <summary>
            Determines whether the dashboard is disabled.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.DistributedApplicationOptions.AllowUnsecuredTransport">
            <summary>
            Allows the use of HTTP urls for for the AppHost resource endpoint.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.DistributedApplicationResourceBuilder`1.WithAnnotation``1(``0,Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior)">
            <inheritdoc />
        </member>
        <member name="T:Aspire.Hosting.Eventing.DistributedApplicationEventing">
            <inheritdoc cref="T:Aspire.Hosting.Eventing.IDistributedApplicationEventing" />
        </member>
        <member name="M:Aspire.Hosting.Eventing.DistributedApplicationEventing.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.PublishAsync``1(``0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Aspire.Hosting.Eventing.DistributedApplicationEventing.Subscribe``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.Subscribe``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
        </member>
        <member name="M:Aspire.Hosting.Eventing.DistributedApplicationEventing.Subscribe``1(Aspire.Hosting.ApplicationModel.IResource,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.Subscribe``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
        </member>
        <member name="M:Aspire.Hosting.Eventing.DistributedApplicationEventing.Unsubscribe(Aspire.Hosting.Eventing.DistributedApplicationEventSubscription)">
            <inheritdoc cref="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.Unsubscribe(Aspire.Hosting.Eventing.DistributedApplicationEventSubscription)" />
        </member>
        <member name="T:Aspire.Hosting.Eventing.DistributedApplicationEventSubscription">
            <summary>
            Represents a subscription to an event that is published during the lifecycle of the AppHost.
            </summary>
            <param name="callback">Callback to invoke when the event is published.</param>
        </member>
        <member name="M:Aspire.Hosting.Eventing.DistributedApplicationEventSubscription.#ctor(System.Func{Aspire.Hosting.Eventing.IDistributedApplicationEvent,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Represents a subscription to an event that is published during the lifecycle of the AppHost.
            </summary>
            <param name="callback">Callback to invoke when the event is published.</param>
        </member>
        <member name="P:Aspire.Hosting.Eventing.DistributedApplicationEventSubscription.Callback">
            <summary>
            The callback to be executed when the event is published.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Eventing.DistributedApplicationResourceEventSubscription">
            <summary>
            Represents a subscription to an event that is published during the lifecycle of the AppHost for a specific resource.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Eventing.DistributedApplicationResourceEventSubscription.#ctor(Aspire.Hosting.ApplicationModel.IResource,System.Func{Aspire.Hosting.Eventing.IDistributedApplicationResourceEvent,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Represents a subscription to an event that is published during the lifecycle of the AppHost for a specific resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Eventing.DistributedApplicationResourceEventSubscription.Resource">
            <summary>
            Resource associated with this subscription.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Eventing.IDistributedApplicationEvent">
            <summary>
            Represents an event that is published during the lifecycle of the AppHost.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Eventing.IDistributedApplicationResourceEvent">
            <summary>
            Represents an event that is published during the lifecycle of the AppHost for a specific resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Eventing.IDistributedApplicationResourceEvent.Resource">
            <summary>
            Resource associated with this event.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Eventing.IDistributedApplicationEventing">
            <summary>
            Supports publishing and subscribing to events which are executed during the AppHost lifecycle.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.Subscribe``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes a callback to a specific event type within the AppHost.
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="callback">A callback to handle the event.</param>
            <returns>A subscription instance which can be used to unsubscribe </returns>
        </member>
        <member name="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.Subscribe``1(Aspire.Hosting.ApplicationModel.IResource,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes a callback to a specific event type 
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="resource">The resource instance associated with the event.</param>
            <param name="callback">A callback to handle the event.</param>
            <returns>A subscription instance which can be used to unsubscribe.</returns>
        </member>
        <member name="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.Unsubscribe(Aspire.Hosting.Eventing.DistributedApplicationEventSubscription)">
            <summary>
            Unsubscribe from an event.
            </summary>
            <param name="subscription">The specific subscription to unsubscribe.</param>
        </member>
        <member name="M:Aspire.Hosting.Eventing.IDistributedApplicationEventing.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes an event to all subscribes of the specific event type.
            </summary>
            <typeparam name="T">The type of the event</typeparam>
            <param name="event">The event.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that can be awaited.</returns>
        </member>
        <member name="T:Aspire.Hosting.ExecutableResourceBuilderExtensions">
            <summary>
            Provides extension methods for adding executable resources to the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> application model.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ExecutableResourceBuilderExtensions.AddExecutable(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String,System.String,System.String[])">
            <summary>
            Adds an executable resource to the application model.
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource.</param>
            <param name="command">The executable path. This can be a fully qualified path or a executable to run from the shell/command line.</param>
            <param name="workingDirectory">The working directory of the executable.</param>
            <param name="args">The arguments to the executable.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ExecutableResourceBuilderExtensions.PublishAsDockerFile``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Collections.Generic.IEnumerable{Aspire.Hosting.ApplicationModel.DockerBuildArg})">
            <summary>
            Adds annotation to <see cref="T:Aspire.Hosting.ApplicationModel.ExecutableResource" /> to support containerization during deployment.
            The resulting container image is built, and when the optional <paramref name="buildArgs"/> are provided
            they're used with <c>docker build --build-arg</c>.
            </summary>
            <typeparam name="T">Type of executable resource</typeparam>
            <param name="builder">Resource builder</param>
            <param name="buildArgs">The optional build arguments, used with <c>docker build --build-args</c>.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="T:Aspire.Hosting.ExecutableResourceExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:Aspire.Hosting.ApplicationModel.ExecutableResource"/> objects.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ExecutableResourceExtensions.GetExecutableResources(Aspire.Hosting.ApplicationModel.DistributedApplicationModel)">
            <summary>
            Returns an enumerable collection of executable resources from the specified distributed application model.
            </summary>
            <param name="model">The distributed application model to retrieve executable resources from.</param>
            <returns>An enumerable collection of executable resources.</returns>
        </member>
        <member name="T:Aspire.Hosting.IDistributedApplicationBuilder">
            <summary>
            A builder for creating instances of <see cref="T:Aspire.Hosting.DistributedApplication"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> is the central interface for defining
            the resources which are orchestrated by the <see cref="T:Aspire.Hosting.DistributedApplication"/> when
            the app host is launched.
            </para>
            <para>
            To create an instance of the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> interface
            developers should use the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/>
            method. Once the builder is created extension methods which target the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>
            interface can be used to add resources to the distributed application.
            </para>
            </remarks>
            <example>
            <para>
            This example shows a distributed application that contains a .NET project (InventoryService) that uses
            a Redis cache and a PostgreSQL database. The builder is created using the <see cref="M:Aspire.Hosting.DistributedApplication.CreateBuilder(System.String[])"/>
            method.
            </para>
            <para>
            The <see href="https://learn.microsoft.com/dotnet/api/aspire.hosting.redisbuilderextensions.addredis">AddRedis</see>
            and <see href="https://learn.microsoft.com/dotnet/api/aspire.hosting.postgresbuilderextensions.addpostgres">AddPostgres</see>
            methods are used to add Redis and PostgreSQL container resources. The results of the methods are stored in variables for
            later use.
            </para>
            
            <code lang="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            var cache = builder.AddRedis("cache");
            var inventoryDatabase = builder.AddPostgres("postgres").AddDatabase("inventory");
            builder.AddProject&lt;Projects.InventoryService&gt;("inventoryservice")
                   .WithReference(cache)
                   .WithReference(inventory);
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.Configuration">
            <inheritdoc cref="P:Microsoft.Extensions.Hosting.HostApplicationBuilder.Configuration" />
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.AppHostDirectory">
            <summary>
            Directory of the project where the app host is located. Defaults to the content root if there's no project.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.AppHostAssembly">
            <summary>
            Assembly of the app host project.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.Environment">
            <inheritdoc cref="P:Microsoft.Extensions.Hosting.HostApplicationBuilder.Environment" />
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.Services">
            <inheritdoc cref="P:Microsoft.Extensions.Hosting.HostApplicationBuilder.Services" />
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.Eventing">
            <summary>
            Eventing infrastructure for AppHost lifecycle.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.ExecutionContext">
            <summary>
            Execution context for this invocation of the AppHost.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Aspire.Hosting.IDistributedApplicationBuilder.ExecutionContext"/> property provides access key information about the context
            in which the distributed application is running. The most important properties that
            the <see cref="T:Aspire.Hosting.DistributedApplicationExecutionContext" /> provides is the
            <see cref="P:Aspire.Hosting.DistributedApplicationExecutionContext.IsPublishMode"/> and <see cref="P:Aspire.Hosting.DistributedApplicationExecutionContext.IsRunMode"/>
            properties. Developers building .NET Aspire based applications may whish to change the application
            model depending on whether they are running locally, or whether they are publishing to the cloud.
            </para>
            </remarks>
            <example>
            <para>
            An example of using the <see cref="P:Aspire.Hosting.DistributedApplicationExecutionContext.IsRunMode"/> property on the <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> via
            the <see cref="P:Aspire.Hosting.ApplicationModel.IResourceBuilder`1.ApplicationBuilder"/>. In this case an extension method is used to generate a stable node name for RabbitMQ for local
            development runs.
            </para>
            <code lang="csharp">
            private static IResourceBuilder&lt;RabbitMQServerResource&gt; RunWithStableNodeName(this IResourceBuilder&lt;RabbitMQServerResource&gt; builder)
            {
                if (builder.ApplicationBuilder.ExecutionContext.IsRunMode)
                {
                    builder.WithEnvironment(context =>
                    {
                        // Set a stable node name so queue storage is consistent between sessions
                        var nodeName = $"{builder.Resource.Name}@localhost";
                        context.EnvironmentVariables["RABBITMQ_NODENAME"] = nodeName;
                    });
                }
            
                return builder;
            }
            </code>
            </example>
        </member>
        <member name="P:Aspire.Hosting.IDistributedApplicationBuilder.Resources">
            <summary>
            Gets the collection of resources for the distributed application.
            </summary>
            <remarks>
            This can be mutated by adding more resources, which will update its current view.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.IDistributedApplicationBuilder.AddResource``1(``0)">
            <summary>
            Adds a resource of type <typeparamref name="T"/> to the distributed application.
            </summary>
            <typeparam name="T">The type of resource to add.</typeparam>
            <param name="resource">The resource to add.</param>
            <returns>A builder for configuring the added resource.</returns>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException">Thrown when a resource with the same name already exists.</exception>
            <remarks>
            <para>
            The <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.AddResource``1(``0)"/> method is not typically used directly by developers building
            Aspire-based applications. It is typically used by developers building extensions to Aspire and is
            called from within an extension method to add a custom resource to the application model.
            </para>
            </remarks>
            <example>
            This example shows the implementation of the <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.AddContainer(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)"/>
            method which makes use of the <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.AddResource``1(``0)"/> method to add a container resource to the application. In .NET Aspire
            the pattern for defining new resources is to include a method that extends <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> and and then
            constructs a resource derived from <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> and adds it to the application model using the <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.AddResource``1(``0)"/>
            method. Other extension methods (such as <see cref="M:Aspire.Hosting.ContainerResourceBuilderExtensions.WithImage``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String)"/>
            in this case) can be chained to configure the resource as desired.
            <code lang="csharp">
            public static IResourceBuilder&lt;ContainerResource&gt; AddContainer(this IDistributedApplicationBuilder builder, string name, string image, string tag)
            {
                var container = new ContainerResource(name);
                return builder.AddResource(container)
                              .WithImage(image, tag);
            }
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.IDistributedApplicationBuilder.CreateResourceBuilder``1(``0)">
            <summary>
            Creates a new resource builder based on an existing resource.
            </summary>
            <typeparam name="T">Type of resource.</typeparam>
            <param name="resource">An existing resource.</param>
            <returns>A resource builder.</returns>
            <remarks>
            <para>
            The <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.CreateResourceBuilder``1(``0)"/> method is used to create an <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/> for a specific
            resource where the original resource builder cannot be referenced. This does not create a new resource, but instead returns
            a resource builder for an existing resource.
            </para>
            <para>
            This method is typically used when building extensions to .NET Aspire where the original resource builder cannot be
            referenced directly. Using the <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.CreateResourceBuilder``1(``0)"/> method allows for easier mutation of resources
            within the application model.
            </para>
            <para>
            Calling extension methods on the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/> typically results in modifications to the <see cref="P:Aspire.Hosting.ApplicationModel.IResource.Annotations"/>
            collection. Not all changes to annotations will be effective depending on what stage of the lifecycle the app host is in. See <see cref="T:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook"/>
            for more details.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows the implementation of the <see cref="M:Aspire.Hosting.ParameterResourceBuilderExtensions.AddConnectionString(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)"/>
            extension method.
            </para>
            <para>
            The <see cref="M:Aspire.Hosting.ParameterResourceBuilderExtensions.AddConnectionString(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)" /> method creates a new
            <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/> in the application model. The return type of <see cref="M:Aspire.Hosting.ParameterResourceBuilderExtensions.AddConnectionString(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)"/>
            is <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>. The <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/> type does not implement the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString"/>.
            </para>
            <para>
            To work around this issue the <see cref="M:Aspire.Hosting.ParameterResourceBuilderExtensions.AddConnectionString(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)"/> method wraps the
            parameter resource in a "surrogate" class which proxies access to the <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/> fields but implements <see cref="T:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString"/>. The
            <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.CreateResourceBuilder``1(``0)"/> method assists by allowing the creation of a <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/> without adding
            another resource to the application model.
            </para>
            <code lang="csharp">
            public static IResourceBuilder&lt;IResourceWithConnectionString&gt; AddConnectionString(this IDistributedApplicationBuilder builder, string name, string? environmentVariableName = null)
            {
                var parameterBuilder = builder.AddParameter(name, _ =>
                {
                    return builder.Configuration.GetConnectionString(name) ?? throw new DistributedApplicationException($"Connection string parameter resource could not be used because connection string '{name}' is missing.");
                },
                secret: true,
                connectionString: true);
            
                var surrogate = new ResourceWithConnectionStringSurrogate(parameterBuilder.Resource, environmentVariableName);
                return builder.CreateResourceBuilder(surrogate);
            }
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.IDistributedApplicationBuilder.Build">
            <summary>
            Builds and returns a new <see cref="T:Aspire.Hosting.DistributedApplication"/> instance. This can only be called once.
            </summary>
            <returns>A new <see cref="T:Aspire.Hosting.DistributedApplication"/> instance.</returns>
            <remarks>
            <para>
            Callers of the <see cref="M:Aspire.Hosting.IDistributedApplicationBuilder.Build"/> method should only call it once. are responsible for the lifecycle of the
            <see cref="T:Aspire.Hosting.DistributedApplication"/> instance that is returned. Note that the <see cref="T:Aspire.Hosting.DistributedApplication"/>
            type implements <see cref="T:System.IDisposable" /> and should be disposed of when it is no longer needed. Note that in
            many templates and samples Dispose is omitted for brevity because in those cases the instance is destroyed
            when the process exists.
            </para>
            </remarks>
        </member>
        <member name="T:Aspire.Hosting.IProjectMetadata">
            <summary>
            Represents metadata about a project resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.IProjectMetadata.ProjectPath">
            <summary>
            Gets the fully-qualified path to the project.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook">
            <summary>
            Defines an interface for hooks that are executed during the lifecycle of a distributed application.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.BeforeStartAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)">
            <summary>
            Executes before the distributed application starts.
            </summary>
            <param name="appModel">The distributed application model.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterEndpointsAllocatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)">
            <summary>
            Executes after the orchestrator allocates endpoints for resources in the application model.
            </summary>
            <param name="appModel">The distributed application model.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterResourcesCreatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)">
            <summary>
            Executes after the orchestrator has created the resources in the application model.
            </summary>
            <remarks>
            There is no guarantee that the resources have fully started or are in a working state when this method is called.
            </remarks>
            <param name="appModel">The <see cref="T:Aspire.Hosting.ApplicationModel.DistributedApplicationModel"/> for the distributed application.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions">
            <summary>
            Provides extension methods for adding lifecycle hooks to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.AddLifecycleHook``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a distributed application lifecycle hook to the service collection.
            </summary>
            <typeparam name="T">The type of the distributed application lifecycle hook to add.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the distributed application lifecycle hook to.</param>
        </member>
        <member name="M:Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.TryAddLifecycleHook``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Attempts to add a distributed application lifecycle hook to the service collection.
            </summary>
            <typeparam name="T">The type of the distributed application lifecycle hook to add.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the distributed application lifecycle hook to.</param>
        </member>
        <member name="M:Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.AddLifecycleHook``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Adds a distributed application lifecycle hook to the service collection.
            </summary>
            <typeparam name="T">The type of the distributed application lifecycle hook.</typeparam>
            <param name="services">The service collection to add the hook to.</param>
            <param name="implementationFactory">A factory function that creates the hook implementation.</param>
        </member>
        <member name="M:Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.TryAddLifecycleHook``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Attempts to add a distributed application lifecycle hook to the service collection. 
            </summary>
            <typeparam name="T">The type of the distributed application lifecycle hook.</typeparam>
            <param name="services">The service collection to add the hook to.</param>
            <param name="implementationFactory">A factory function that creates the hook implementation.</param>
        </member>
        <member name="T:Aspire.Hosting.OtlpConfigurationExtensions">
            <summary>
            Provides extension methods for configuring OpenTelemetry in projects using environment variables.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.OtlpConfigurationExtensions.AddOtlpEnvironment(Aspire.Hosting.ApplicationModel.IResource,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            Configures OpenTelemetry in projects using environment variables.
            </summary>
            <param name="resource">The resource to add annotations to.</param>
            <param name="configuration">The configuration to use for the OTLP exporter endpoint URL.</param>
            <param name="environment">The host environment to check if the application is running in development mode.</param>
        </member>
        <member name="M:Aspire.Hosting.OtlpConfigurationExtensions.WithOtlpExporter``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0})">
            <summary>
            Injects the appropriate environment variables to allow the resource to enable sending telemetry to the dashboard.
            1. It sets the OTLP endpoint to the value of the DOTNET_DASHBOARD_OTLP_ENDPOINT_URL environment variable.
            2. It sets the service name and instance id to the resource name and UID. Values are injected by the orchestrator.
            3. It sets a small batch schedule delay in development. This reduces the delay that OTLP exporter waits to sends telemetry and makes the dashboard telemetry pages responsive.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="T:Aspire.Hosting.ParameterResourceBuilderExtensions">
            <summary>
            Provides extension methods for adding parameter resources to an application.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ParameterResourceBuilderExtensions.AddParameter(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.Boolean)">
            <summary>
            Adds a parameter resource to the application.
            </summary>
            <param name="builder">Distributed application builder</param>
            <param name="name">Name of parameter resource</param>
            <param name="secret">Optional flag indicating whether the parameter should be regarded as secret.</param>
            <returns>Resource builder for the parameter.</returns>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException"></exception>
        </member>
        <member name="T:Aspire.Hosting.ParameterResourceBuilderExtensions.WriteParameterLogsHook">
            <summary>
            Writes the message to the specified resource's logs.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ParameterResourceBuilderExtensions.WriteParameterLogsHook.#ctor(Aspire.Hosting.ApplicationModel.ResourceLoggerService,System.String,System.String)">
            <summary>
            Writes the message to the specified resource's logs.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ParameterResourceBuilderExtensions.AddConnectionString(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)">
            <summary>
            Adds a parameter to the distributed application but wrapped in a resource with a connection string for use with <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.WithReference``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.IResourceWithConnectionString},System.String,System.Boolean)"/>
            </summary>
            <param name="builder">Distributed application builder</param>
            <param name="name">Name of parameter resource. The value of the connection string is read from the "ConnectionStrings:{resourcename}" configuration section, for example in appsettings.json or user secrets</param>
            <param name="environmentVariableName">Environment variable name to set when WithReference is used.</param>
            <returns>Resource builder for the parameter.</returns>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException"></exception>
        </member>
        <member name="M:Aspire.Hosting.ParameterResourceBuilderExtensions.PublishAsConnectionString``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0})">
            <summary>
            Changes the resource to be published as a connection string reference in the manifest.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <returns>The configured <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ParameterResourceBuilderExtensions.ConfigureConnectionStringManifestPublisher(Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.IResourceWithConnectionString})">
            <summary>
            Configures the manifest writer for this resource to be a parameter resource.
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</param>
        </member>
        <member name="M:Aspire.Hosting.ParameterResourceBuilderExtensions.CreateDefaultPasswordParameter(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a default password parameter that generates a random password.
            </summary>
            <param name="builder">Distributed application builder</param>
            <param name="name">Name of parameter resource</param>
            <param name="lower"><see langword="true" /> if lowercase alphabet characters should be included; otherwise, <see langword="false" />.</param>
            <param name="upper"><see langword="true" /> if uppercase alphabet characters should be included; otherwise, <see langword="false" />.</param>
            <param name="numeric"><see langword="true" /> if numeric characters should be included; otherwise, <see langword="false" />.</param>
            <param name="special"><see langword="true" /> if special characters should be included; otherwise, <see langword="false" />.</param>
            <param name="minLower">The minimum number of lowercase characters in the result.</param>
            <param name="minUpper">The minimum number of uppercase characters in the result.</param>
            <param name="minNumeric">The minimum number of numeric characters in the result.</param>
            <param name="minSpecial">The minimum number of special characters in the result.</param>
            <returns>The created <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/>.</returns>
            <remarks>
            To ensure the generated password has enough entropy, see the remarks in <see cref="T:Aspire.Hosting.ApplicationModel.GenerateParameterDefault"/>.<br/>
            The value will be saved to the app host project's user secrets store when <see cref="P:Aspire.Hosting.DistributedApplicationExecutionContext.IsRunMode"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.ParameterResourceBuilderExtensions.CreateGeneratedParameter(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.Boolean,Aspire.Hosting.ApplicationModel.GenerateParameterDefault)">
            <summary>
            Creates a new <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/> that has a generated value using the <paramref name="parameterDefault"/>.
            </summary>
            <remarks>
            The value will be saved to the app host project's user secrets store when <see cref="P:Aspire.Hosting.DistributedApplicationExecutionContext.IsRunMode"/> is <c>true</c>.
            </remarks>
            <param name="builder">Distributed application builder</param>
            <param name="name">Name of parameter resource</param>
            <param name="secret">Flag indicating whether the parameter should be regarded as secret.</param>
            <param name="parameterDefault">The <see cref="T:Aspire.Hosting.ApplicationModel.GenerateParameterDefault"/> that describes how the parameter's value should be generated.</param>
            <returns>The created <see cref="T:Aspire.Hosting.ApplicationModel.ParameterResource"/>.</returns>
        </member>
        <member name="T:Aspire.Hosting.ProjectResourceBuilderExtensions">
            <summary>
            Provides extension methods for <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/> to add and configure project resources.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String)">
            <summary>
            Adds a .NET project to the application model.
            </summary>
            <typeparam name="TProject">A type that represents the project reference.</typeparam>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource. This name will be used for service discovery when referenced in a dependency.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            This overload of the <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String)"/> method takes
            a <typeparamref name="TProject"/> type parameter. The <typeparamref name="TProject"/> type parameter is constrained
            to types that implement the <see cref="T:Aspire.Hosting.IProjectMetadata"/> interface.
            </para>
            <para>
            Classes that implement the <see cref="T:Aspire.Hosting.IProjectMetadata"/> interface are generated when a .NET project is added as a reference
            to the app host project. The generated class contains a property that returns the path to the referenced project file. Using this path
            .NET Aspire parses the <c>launchSettings.json</c> file to determine which launch profile to use when running the project, and
            what endpoint configuration to automatically generate.
            </para>
            <para>
            The name of the automatically generated project metadata type is a normalized version of the project name. Periods, dashes, and
            spaces in project names are converted to underscores. This normalization may lead to naming conflicts. If a conflict occurs the <c>&lt;ProjectReference /&gt;</c>
            that references the project can have a <c>AspireProjectMetadataTypeName="..."</c> attribute added to override the name.
            </para>
            <para name="kestrel">
            Note that endpoints coming from the Kestrel configuration are automatically added to the project. The Kestrel Url and Protocols are used
            to build the equivalent <see cref="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation"/>.
            </para>
            </remarks>
            <example>
            Example of adding a project to the application model.
            <code lang="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            
            builder.AddProject&lt;Projects.InventoryService&gt;("inventoryservice");
            
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)">
            <summary>
            Adds a .NET project to the application model. 
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource. This name will be used for service discovery when referenced in a dependency.</param>
            <param name="projectPath">The path to the project file.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            This overload of the <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)"/> method adds a project to the application
            model using a path to the project file. This allows for projects to be referenced that may not be part of the same solution. If the project
            path is not an absolute path then it will be computed relative to the app host directory.
            </para>
            <inheritdoc cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String)" path="/remarks/para[@name='kestrel']" />
            </remarks>
            <example>
            Add a project to the app model via a project path.
            <code lang="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            
            builder.AddProject("inventoryservice", @"..\InventoryService\InventoryService.csproj");
            
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)">
            <summary>
            Adds a .NET project to the application model. By default, this will exist in a Projects namespace. e.g. Projects.MyProject.
            If the project is not in a Projects namespace, make sure a project reference is added from the AppHost project to the target project.
            </summary>
            <typeparam name="TProject">A type that represents the project reference.</typeparam>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource. This name will be used for service discovery when referenced in a dependency.</param>
            <param name="launchProfileName">The launch profile to use. If <c>null</c> then no launch profile will be used.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            This overload of the <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String)"/> method takes
            a <typeparamref name="TProject"/> type parameter. The <typeparamref name="TProject"/> type parameter is constrained
            to types that implement the <see cref="T:Aspire.Hosting.IProjectMetadata"/> interface.
            </para>
            <para>
            Classes that implement the <see cref="T:Aspire.Hosting.IProjectMetadata"/> interface are generated when a .NET project is added as a reference
            to the app host project. The generated class contains a property that returns the path to the referenced project file. Using this path
            .NET Aspire parses the <c>launchSettings.json</c> file to determine which launch profile to use when running the project, and
            what endpoint configuration to automatically generate.
            </para>
            <para>
            The name of the automatically generated project metadata type is a normalized version of the project name. Periods, dashes, and
            spaces in project names are converted to underscores. This normalization may lead to naming conflicts. If a conflict occurs the <c>&lt;ProjectReference /&gt;</c>
            that references the project can have a <c>AspireProjectMetadataTypeName="..."</c> attribute added to override the name.
            </para>
            <inheritdoc cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String)" path="/remarks/para[@name='kestrel']" />
            </remarks>
            <example>
            Example of adding a project to the application model.
            <code lang="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            
            builder.AddProject&lt;Projects.InventoryService&gt;("inventoryservice", launchProfileName: "otherLaunchProfile");
            
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String,System.String)">
            <summary>
            Adds a .NET project to the application model.
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource. This name will be used for service discovery when referenced in a dependency.</param>
            <param name="projectPath">The path to the project file.</param>
            <param name="launchProfileName">The launch profile to use. If <c>null</c> then no launch profile will be used.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            This overload of the <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)"/> method adds a project to the application
            model using a path to the project file. This allows for projects to be referenced that may not be part of the same solution. If the project
            path is not an absolute path then it will be computed relative to the app host directory.
            </para>
            <inheritdoc cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String)" path="/remarks/para[@name='kestrel']" />
            </remarks>
            <example>
            Add a project to the app model via a project path.
            <code lang="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            
            builder.AddProject("inventoryservice", @"..\InventoryService\InventoryService.csproj", launchProfileName: "otherLaunchProfile");
            
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.Action{Aspire.Hosting.ProjectResourceOptions})">
            <summary>
            Adds a .NET project to the application model.
            </summary>
            <typeparam name="TProject">A type that represents the project reference.</typeparam>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource. This name will be used for service discovery when referenced in a dependency.</param>
            <param name="configure">A callback to configure the project resource options.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            This overload of the <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject``1(Aspire.Hosting.IDistributedApplicationBuilder,System.String)"/> method takes
            a <typeparamref name="TProject"/> type parameter. The <typeparamref name="TProject"/> type parameter is constrained
            to types that implement the <see cref="T:Aspire.Hosting.IProjectMetadata"/> interface.
            </para>
            <para>
            Classes that implement the <see cref="T:Aspire.Hosting.IProjectMetadata"/> interface are generated when a .NET project is added as a reference
            to the app host project. The generated class contains a property that returns the path to the referenced project file. Using this path
            .NET Aspire parses the <c>launchSettings.json</c> file to determine which launch profile to use when running the project, and
            what endpoint configuration to automatically generate.
            </para>
            <para>
            The name of the automatically generated project metadata type is a normalized version of the project name. Periods, dashes, and
            spaces in project names are converted to underscores. This normalization may lead to naming conflicts. If a conflict occurs the <c>&lt;ProjectReference /&gt;</c>
            that references the project can have a <c>AspireProjectMetadataTypeName="..."</c> attribute added to override the name.
            </para>
            </remarks>
            <example>
            Example of adding a project to the application model.
            <code lang="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            
            builder.AddProject&lt;Projects.InventoryService&gt;("inventoryservice", options => { options.LaunchProfileName = "otherLaunchProfile"; });
            
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String,System.Action{Aspire.Hosting.ProjectResourceOptions})">
            <summary>
            Adds a .NET project to the application model.
            </summary>
            <param name="builder">The <see cref="T:Aspire.Hosting.IDistributedApplicationBuilder"/>.</param>
            <param name="name">The name of the resource. This name will be used for service discovery when referenced in a dependency.</param>
            <param name="projectPath">The path to the project file.</param>
            <param name="configure">A callback to configure the project resource options.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <remarks>
            <para>
            This overload of the <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(Aspire.Hosting.IDistributedApplicationBuilder,System.String,System.String)"/> method adds a project to the application
            model using a path to the project file. This allows for projects to be referenced that may not be part of the same solution. If the project
            path is not an absolute path then it will be computed relative to the app host directory.
            </para>
            </remarks>
            <example>
            Add a project to the app model via a project path.
            <code lang="csharp">
            var builder = DistributedApplication.CreateBuilder(args);
            
            builder.AddProject("inventoryservice", @"..\InventoryService\InventoryService.csproj", options => { options.LaunchProfileName = "otherLaunchProfile"; });
            
            builder.Build().Run();
            </code>
            </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.WithReplicas(Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ProjectResource},System.Int32)">
             <summary>
             Configures how many replicas of the project should be created for the project.
             </summary>
             <param name="builder">The project resource builder.</param>
             <param name="replicas">The number of replicas.</param>
             <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
             <remarks>
             <para>
             When this method is applied to a project resource it will configure the app host to start multiple instances
             of the application based on the specified number of replicas. By default the app host automatically starts a
             reverse proxy for each process. When <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.WithReplicas(Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ProjectResource},System.Int32)"/> is
             used the reverse proxy will load balance traffic between the replicas.
             </para>
             <para>
             This capability can be useful when debugging scale out scenarios to ensure state is appropriately managed
             within a cluster of instances.
             </para>
             </remarks>
             <example>
             Start multiple instances of the same service.
             <code lang="csharp">
             var builder = DistributedApplication.CreateBuilder(args);
            
             builder.AddProject&lt;Projects.InventoryService&gt;("inventoryservice")
                    .WithReplicas(3);
             </code>
             </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.DisableForwardedHeaders(Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ProjectResource})">
             <summary>
             Configures the project to disable forwarded headers when being published.
             </summary>
             <param name="builder">The project resource builder.</param>
             <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
             <remarks>
             <para>
             By default .NET Aspire assumes that .NET applications which expose endpoints should be configured to
             use forwarded headers. This is because most typical cloud native deployment scenarios involve a reverse
             proxy which translates an external endpoint hostname to an internal address.
             </para>
             <para>
             To enable forwarded headers the <c>ASPNETCORE_FORWARDEDHEADERS_ENABLED</c> variable is injected
             into the project and set to true. If the <see cref="M:Aspire.Hosting.ProjectResourceBuilderExtensions.DisableForwardedHeaders(Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ProjectResource})"/>
             extension is used this environment variable will not be set.
             </para>
             </remarks>
             <example>
             Disable forwarded headers for a project.
             <code lang="csharp">
             var builder = DistributedApplication.CreateBuilder(args);
            
             builder.AddProject&lt;Projects.InventoryService&gt;("inventoryservice")
                    .DisableForwardedHeaders();
             </code>
             </example>
        </member>
        <member name="M:Aspire.Hosting.ProjectResourceBuilderExtensions.WithEndpointsInEnvironment(Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ProjectResource},System.Func{Aspire.Hosting.ApplicationModel.EndpointAnnotation,System.Boolean})">
            <summary>
            Set a filter that determines if environment variables are injected for a given endpoint.
            By default, all endpoints are included (if this method is not called).
            </summary>
            <param name="builder">The project resource builder.</param>
            <param name="filter">The filter callback that returns true if and only if the endpoint should be included.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="T:Aspire.Hosting.ProjectResourceOptions">
            <summary>
            Various properties to modify the behavior of the project resource.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ProjectResourceOptions.LaunchProfileName">
            <summary>
            The launch profile to use. If <c>null</c> then the default launch profile will be used.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ProjectResourceOptions.ExcludeLaunchProfile">
            <summary>
            If set, no launch profile will be used, and LaunchProfileName will be ignored.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.ProjectResourceOptions.ExcludeKestrelEndpoints">
            <summary>
            If set, ignore endpoints coming from Kestrel configuration.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ContainerMountAnonymousVolumesReadOnlyExceptionMessage">
            <summary>
              Looks up a localized string similar to Anonymous volumes cannot be read-only..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ContainerMountBindMountsRequireRootedPaths">
            <summary>
              Looks up a localized string similar to Bind mounts must specify an absolute path..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ContainerMountBindMountsRequireSourceExceptionMessage">
            <summary>
              Looks up a localized string similar to Bind mounts must specify a source path..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ContainerRuntimePrerequisiteMissingExceptionMessage">
             <summary>
               Looks up a localized string similar to Container runtime &apos;{0}&apos; could not be found. The error from the container runtime check was: {1}.
            See https://aka.ms/dotnet/aspire/containers for more details on supported container runtimes..
             </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ContainerRuntimeUnhealthyExceptionMessage">
            <summary>
              Looks up a localized string similar to Container runtime &apos;{0}&apos; was found but appears to be unhealthy. The error from the container runtime check was {1}..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ContainerRuntimeUnresponsiveExceptionMessage">
            <summary>
              Looks up a localized string similar to Container runtime &apos;{0}&apos; was found but appears to be unresponsive. The command &apos;{0}&apos; did not return after {1} seconds..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.DcpDependencyCheckFailedMessage">
            <summary>
              Looks up a localized string similar to Application orchestrator dependency check returned an error: {0}.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.DcpVersionCheckTooLowMessage">
            <summary>
              Looks up a localized string similar to Newer version of .NET Aspire workload is required to run the application. Run &apos;dotnet workload update&apos; to get it..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.LaunchSettingsFileDoesNotContainProfileExceptionMessage">
            <summary>
              Looks up a localized string similar to Launch settings file does not contain &apos;{0}&apos; profile..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ProjectDoesNotContainMetadataExceptionMessage">
            <summary>
              Looks up a localized string similar to Project does not contain project metadata..
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Properties.Resources.ProjectFileNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to Project file &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="T:Aspire.Hosting.Publishing.IDistributedApplicationPublisher">
            <summary>
            Defines the interface for publishing a distributed application.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Publishing.IDistributedApplicationPublisher.PublishAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel,System.Threading.CancellationToken)">
            <summary>
            Publishes the specified distributed application model.
            </summary>
            <param name="model">The distributed application model to publish.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Aspire.Hosting.Publishing.ManifestPublishingContext">
            <summary>
            Contextual information used for manifest publishing during this execution of the AppHost.
            </summary>
            <param name="executionContext">Global contextual information for this invocation of the AppHost.</param>
            <param name="manifestPath">Manifest path passed in for this invocation of the AppHost.</param>
            <param name="writer">JSON writer used to writing the manifest.</param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.#ctor(Aspire.Hosting.DistributedApplicationExecutionContext,System.String,System.Text.Json.Utf8JsonWriter,System.Threading.CancellationToken)">
            <summary>
            Contextual information used for manifest publishing during this execution of the AppHost.
            </summary>
            <param name="executionContext">Global contextual information for this invocation of the AppHost.</param>
            <param name="manifestPath">Manifest path passed in for this invocation of the AppHost.</param>
            <param name="writer">JSON writer used to writing the manifest.</param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
        </member>
        <member name="P:Aspire.Hosting.Publishing.ManifestPublishingContext.ExecutionContext">
            <summary>
            Gets execution context for this invocation of the AppHost.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Publishing.ManifestPublishingContext.ManifestPath">
            <summary>
            Gets manifest path specified for this invocation of the AppHost.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Publishing.ManifestPublishingContext.Writer">
            <summary>
            Gets JSON writer for writing manifest entries.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Publishing.ManifestPublishingContext.CancellationToken">
            <summary>
            Gets cancellation token for this operation.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.GetManifestRelativePath(System.String)">
            <summary>
            Generates a relative path based on the location of the manifest path.
            </summary>
            <param name="path">A path to a file.</param>
            <returns>The specified path as a relative path to the manifest.</returns>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException">Throws when could not get the directory directory name from the output path.</exception>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.WriteContainerAsync(Aspire.Hosting.ApplicationModel.ContainerResource)">
            <summary>
            Writes JSON elements to the manifest which represent a container resource.
            </summary>
            <param name="container">The container resource to written to the manifest.</param>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException">Thrown if the container resource does not contain a <see cref="T:Aspire.Hosting.ApplicationModel.ContainerImageAnnotation"/>.</exception>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.WriteConnectionString(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Writes the "connectionString" field for the underlying resource.
            </summary>
            <param name="resource">The <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/>.</param>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.WriteBindings(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Writes endpoints to the resource entry in the manifest based on the resource's
            <see cref="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation"/> entries in the <see cref="P:Aspire.Hosting.ApplicationModel.IResource.Annotations"/>
            collection.
            </summary>
            <param name="resource">The <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> that contains <see cref="T:Aspire.Hosting.ApplicationModel.EndpointAnnotation"/> annotations.</param>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.WriteEnvironmentVariablesAsync(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Writes environment variables to the manifest base on the <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> resource's <see cref="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation"/> annotations."/>
            </summary>
            <param name="resource">The <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> which contains <see cref="T:Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation"/> annotations.</param>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.WriteCommandLineArgumentsAsync(Aspire.Hosting.ApplicationModel.IResource)">
            <summary>
            Writes command line arguments to the manifest based on the <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> resource's <see cref="T:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation"/> annotations.
            </summary>
            <param name="resource">The <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> that contains <see cref="T:Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation"/> annotations.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> to await for completion.</returns>
        </member>
        <member name="M:Aspire.Hosting.Publishing.ManifestPublishingContext.TryAddDependentResources(System.Object)">
            <summary>
            Ensures that any <see cref="T:Aspire.Hosting.ApplicationModel.IResource"/> instances referenced by <paramref name="value"/> are
            written to the manifest.
            </summary>
            <param name="value">The object to check for references that may be resources that need to be written.</param>
        </member>
        <member name="T:Aspire.Hosting.Publishing.PublishingOptions">
            <summary>
            Represents the options for publishing an application.
            </summary>
        </member>
        <member name="F:Aspire.Hosting.Publishing.PublishingOptions.Publishing">
            <summary>
            The name of the publishing configuration section in the appsettings.json file.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Publishing.PublishingOptions.Publisher">
            <summary>
            Gets or sets the name of the publisher responsible for publishing the application.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.Publishing.PublishingOptions.OutputPath">
            <summary>
            Gets or sets the path to the directory where the published output will be written.
            </summary>
        </member>
        <member name="T:Aspire.Hosting.ResourceBuilderExtensions">
            <summary>
            Provides extension methods for configuring resources with environment variables.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.String)">
            <summary>
            Adds an environment variable to the resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
            <returns>A resource configured with the specified environment variable.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler@)">
            <summary>
            Adds an environment variable to the resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
            <returns>A resource configured with the specified environment variable.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.ReferenceExpression)">
            <summary>
            Adds an environment variable to the resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
            <returns>A resource configured with the specified environment variable.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.Func{System.String})">
            <summary>
            Adds an environment variable to the resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="name">The name of the environment variable.</param>
            <param name="callback">A callback that allows for deferred execution of a specific environment variable. This runs after resources have been allocated by the orchestrator and allows access to other resources to resolve computed data, e.g. connection strings, ports.</param>
            <returns>A resource configured with the specified environment variable.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Action{Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext})">
            <summary>
            Allows for the population of environment variables on a resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="callback">A callback that allows for deferred execution for computing many environment variables. This runs after resources have been allocated by the orchestrator and allows access to other resources to resolve computed data, e.g. connection strings, ports.</param>
            <returns>A resource configured with the environment variable callback.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Func{Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext,System.Threading.Tasks.Task})">
            <summary>
            Allows for the population of environment variables on a resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="callback">A callback that allows for deferred execution for computing many environment variables. This runs after resources have been allocated by the orchestrator and allows access to other resources to resolve computed data, e.g. connection strings, ports.</param>
            <returns>A resource configured with the environment variable callback.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.EndpointReference)">
            <summary>
            Adds an environment variable to the resource with the endpoint for <paramref name="endpointReference"/>.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="name">The name of the environment variable.</param>
            <param name="endpointReference">The endpoint from which to extract the url.</param>
            <returns>A resource configured with the environment variable callback.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.ParameterResource})">
            <summary>
            Adds an environment variable to the resource with the value from <paramref name="parameter"/>.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="name">Name of environment variable</param>
            <param name="parameter">Resource builder for the parameter resource.</param>
            <returns>A resource configured with the environment variable callback.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.IResourceWithConnectionString})">
            <summary>
            Adds an environment variable to the resource with the connection string from the referenced resource.
            </summary>
            <typeparam name="T">The destination resource type.</typeparam>
            <param name="builder">The destination resource builder to which the environment variable will be added.</param>
            <param name="envVarName">The name of the environment variable under which the connection string will be set.</param>
            <param name="resource">The resource builder of the referenced service from which to pull the connection string.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String[])">
            <summary>
            Adds the arguments to be passed to a container resource when the container is started.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="args">The arguments to be passed to the container when it is started.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Action{Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext})">
            <summary>
            Adds a callback to be executed with a list of command-line arguments when a container resource is started.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The resource builder.</param>
            <param name="callback">A callback that allows for deferred execution for computing arguments. This runs after resources have been allocated by the orchestrator and allows access to other resources to resolve computed data, e.g. connection strings, ports.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithArgs``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Func{Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext,System.Threading.Tasks.Task})">
            <summary>
            Adds a callback to be executed with a list of command-line arguments when a container resource is started.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="callback">A callback that allows for deferred execution for computing arguments. This runs after resources have been allocated by the orchestrator and allows access to other resources to resolve computed data, e.g. connection strings, ports.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithManifestPublishingCallback``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Action{Aspire.Hosting.Publishing.ManifestPublishingContext})">
            <summary>
            Registers a callback which is invoked when manifest is generated for the app model.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="callback">Callback method which takes a <see cref="T:Aspire.Hosting.Publishing.ManifestPublishingContext"/> which can be used to inject JSON into the manifest.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithManifestPublishingCallback``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Func{Aspire.Hosting.Publishing.ManifestPublishingContext,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback which is invoked when manifest is generated for the app model.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="callback">Callback method which takes a <see cref="T:Aspire.Hosting.Publishing.ManifestPublishingContext"/> which can be used to inject JSON into the manifest.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithConnectionStringRedirection``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},Aspire.Hosting.ApplicationModel.IResourceWithConnectionString)">
            <summary>
            Registers a callback which is invoked when a connection string is requested for a resource.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="resource">Resource to which connection string generation is redirected.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithReference``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.ApplicationModel.IResourceWithConnectionString},System.String,System.Boolean)">
            <summary>
            Injects a connection string as an environment variable from the source resource into the destination resource, using the source resource's name as the connection string name (if not overridden).
            The format of the environment variable will be "ConnectionStrings__{sourceResourceName}={connectionString}."
            <para>
            Each resource defines the format of the connection string value. The
            underlying connection string value can be retrieved using <see cref="M:Aspire.Hosting.ApplicationModel.IResourceWithConnectionString.GetConnectionStringAsync(System.Threading.CancellationToken)"/>.
            </para>
            <para>
            Connection strings are also resolved by the configuration system (appSettings.json in the AppHost project, or environment variables). If a connection string is not found on the resource, the configuration system will be queried for a connection string
            using the resource's name.
            </para>
            </summary>
            <typeparam name="TDestination">The destination resource.</typeparam>
            <param name="builder">The resource where connection string will be injected.</param>
            <param name="source">The resource from which to extract the connection string.</param>
            <param name="connectionName">An override of the source resource's name for the connection string. The resulting connection string will be "ConnectionStrings__connectionName" if this is not null.</param>
            <param name="optional"><see langword="true"/> to allow a missing connection string; <see langword="false"/> to throw an exception if the connection string is not found.</param>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException">Throws an exception if the connection string resolves to null. It can be null if the resource has no connection string, and if the configuration has no connection string for the source resource.</exception>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithReference``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},Aspire.Hosting.ApplicationModel.IResourceBuilder{Aspire.Hosting.IResourceWithServiceDiscovery})">
            <summary>
            Injects service discovery information as environment variables from the project resource into the destination resource, using the source resource's name as the service name.
            Each endpoint defined on the project resource will be injected using the format "services__{sourceResourceName}__{endpointName}__{endpointIndex}={uriString}."
            </summary>
            <typeparam name="TDestination">The destination resource.</typeparam>
            <param name="builder">The resource where the service discovery information will be injected.</param>
            <param name="source">The resource from which to extract service discovery information.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithReference``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.Uri)">
            <summary>
            Injects service discovery information as environment variables from the uri into the destination resource, using the name as the service name.
            The uri will be injected using the format "services__{name}__default__0={uri}."
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="builder">The resource where the service discovery information will be injected.</param>
            <param name="name">The name of the service.</param>
            <param name="uri">The uri of the service.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithReference``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},Aspire.Hosting.ApplicationModel.EndpointReference)">
            <summary>
            Injects service discovery information from the specified endpoint into the project resource using the source resource's name as the service name.
            Each endpoint will be injected using the format "services__{sourceResourceName}__{endpointName}__{endpointIndex}={uriString}."
            </summary>
            <typeparam name="TDestination">The destination resource.</typeparam>
            <param name="builder">The resource where the service discovery information will be injected.</param>
            <param name="endpointReference">The endpoint from which to extract the url.</param>
            <returns>A reference to the <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String,System.Action{Aspire.Hosting.ApplicationModel.EndpointAnnotation},System.Boolean)">
            <summary>
            Changes an existing creates a new endpoint if it doesn't exist and invokes callback to modify the defaults.
            </summary>
            <param name="builder">Resource builder for resource with endpoints.</param>
            <param name="endpointName">Name of endpoint to change.</param>
            <param name="callback">Callback that modifies the endpoint.</param>
            <param name="createIfNotExists">Create endpoint if it does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Exposes an endpoint on a resource. This endpoint reference can be retrieved using <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.GetEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)"/>.
            The endpoint name will be the scheme name if not specified.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="targetPort">This is the port the resource is listening on. If the endpoint is used for the container, it is the container port.</param>
            <param name="port">An optional port. This is the port that will be given to other resource to communicate with this resource.</param>
            <param name="scheme">An optional scheme e.g. (http/https). Defaults to "tcp" if not specified.</param>
            <param name="name">An optional name of the endpoint. Defaults to the scheme name if not specified.</param>
            <param name="env">An optional name of the environment variable that will be used to inject the <paramref name="targetPort"/>. If the target port is null one will be dynamically generated and assigned to the environment variable.</param>
            <param name="isExternal">Indicates that this endpoint should be exposed externally at publish time.</param>
            <param name="isProxied">Specifies if the endpoint will be proxied by DCP. Defaults to true.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException">Throws an exception if an endpoint with the same name already exists on the specified resource.</exception>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithHttpEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Boolean)">
            <summary>
            Exposes an HTTP endpoint on a resource. This endpoint reference can be retrieved using <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.GetEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)"/>.
            The endpoint name will be "http" if not specified.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="targetPort">This is the port the resource is listening on. If the endpoint is used for the container, it is the container port.</param>
            <param name="port">An optional port. This is the port that will be given to other resource to communicate with this resource.</param>
            <param name="name">An optional name of the endpoint. Defaults to "http" if not specified.</param>
            <param name="env">An optional name of the environment variable to inject.</param>
            <param name="isProxied">Specifies if the endpoint will be proxied by DCP. Defaults to true.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException">Throws an exception if an endpoint with the same name already exists on the specified resource.</exception>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithHttpsEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Boolean)">
            <summary>
            Exposes an HTTPS endpoint on a resource. This endpoint reference can be retrieved using <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.GetEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)"/>.
            The endpoint name will be "https" if not specified.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <param name="targetPort">This is the port the resource is listening on. If the endpoint is used for the container, it is the container port.</param>
            <param name="port">An optional host port.</param>
            <param name="name">An optional name of the endpoint. Defaults to "https" if not specified.</param>
            <param name="env">An optional name of the environment variable to inject.</param>
            <param name="isProxied">Specifies if the endpoint will be proxied by DCP. Defaults to true.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
            <exception cref="T:Aspire.Hosting.DistributedApplicationException">Throws an exception if an endpoint with the same name already exists on the specified resource.</exception>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.WithExternalHttpEndpoints``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0})">
            <summary>
            Marks existing http or https endpoints on a resource as external.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.GetEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)">
            <summary>
            Gets an <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/> by name from the resource. These endpoints are declared either using <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.WithEndpoint``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Nullable{System.Boolean})"/> or by launch settings (for project resources).
            The <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/> can be used to resolve the address of the endpoint in <see cref="M:Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.Action{Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext})"/>.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The the resource builder.</param>
            <param name="name">The name of the endpoint.</param>
            <returns>An <see cref="T:Aspire.Hosting.ApplicationModel.EndpointReference"/> that can be used to resolve the address of the endpoint after resource allocation has occurred.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.AsHttp2Service``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0})">
            <summary>
            Configures a resource to mark all endpoints' transport as HTTP/2. This is useful for HTTP/2 services that need prior knowledge.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource builder.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.ResourceBuilderExtensions.ExcludeFromManifest``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0})">
            <summary>
            Excludes a resource from being published to the manifest.
            </summary>
            <typeparam name="T">The resource type.</typeparam>
            <param name="builder">The resource to exclude.</param>
            <returns>The <see cref="T:Aspire.Hosting.ApplicationModel.IResourceBuilder`1"/>.</returns>
        </member>
        <member name="M:Aspire.Hosting.Utils.CommandLineArgsParser.Parse(System.String)">
            <summary>Parses a command-line argument string into a list of arguments.</summary>
        </member>
        <member name="M:Aspire.Hosting.Utils.CommandLineArgsParser.ParseArgumentsIntoList(System.String,System.Collections.Generic.List{System.String})">
            <summary>Parses a command-line argument string into a list of arguments.</summary>
            <param name="arguments">The argument string.</param>
            <param name="results">The list into which the component arguments should be stored.</param>
            <remarks>
            This follows the rules outlined in "Parsing C++ Command-Line Arguments" at
            https://msdn.microsoft.com/en-us/library/17w5ykft.aspx.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.Utils.PasswordGenerator.Generate(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a cryptographically random string.
            </summary>
            <remarks>
            <seealso cref="T:Aspire.Hosting.ApplicationModel.GenerateParameterDefault"/>.
            </remarks>
        </member>
        <member name="M:Aspire.Hosting.Utils.VolumeNameGenerator.CreateVolumeName``1(Aspire.Hosting.ApplicationModel.IResourceBuilder{``0},System.String)">
            <summary>
            Creates a volume name with the form <c>$"{applicationName}-{resourceName}-{suffix}</c>, e.g. <c>"myapplication-postgres-data"</c>.
            </summary>
            <remarks>
            If the application name contains chars that are invalid for a volume name, the prefix <c>"volume-"</c> will be used instead.
            </remarks>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.LaunchProfile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.LaunchSettings">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.DictionaryStringLaunchProfile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.DictionaryStringString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Aspire.Hosting.LaunchSettingsSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Aspire.Hosting.LaunchSettingsSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Aspire.Hosting.LaunchSettingsSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Aspire.Hosting.LaunchSettingsSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.Resource">
            <summary>
            Models the full state of an resource (container, executable, project, etc) at a particular point in time.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.ResourceTypeFieldNumber">
            <summary>Field number for the "resource_type" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.DisplayNameFieldNumber">
            <summary>Field number for the "display_name" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.UidFieldNumber">
            <summary>Field number for the "uid" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.StateFieldNumber">
            <summary>Field number for the "state" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Resource.HasState">
            <summary>Gets whether the "state" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.Resource.ClearState">
            <summary>Clears the value of the "state" field</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.CreatedAtFieldNumber">
            <summary>Field number for the "created_at" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.EnvironmentFieldNumber">
            <summary>Field number for the "environment" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.CommandsFieldNumber">
            <summary>Field number for the "commands" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Resource.Properties">
             <summary>
             Properties holding data not modeled directly on the message.
            
             For:
             - Containers: image, container_id, ports
             - Executables: process_id, executable_path, working_directory, arguments
             - Projects: process_id, project_path
             </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.UrlsFieldNumber">
            <summary>Field number for the "urls" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Resource.Urls">
            <summary>
            The list of urls that this resource exposes
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Resource.StateStyleFieldNumber">
            <summary>Field number for the "state_style" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Resource.StateStyle">
            <summary>
            The style of the state. This is used to determine the state icon.
            Supported styles are "success", "info", "warning" and "error". Any other style
            will be treated as "unknown".
            </summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Resource.HasStateStyle">
            <summary>Gets whether the "state_style" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.Resource.ClearStateStyle">
            <summary>Clears the value of the "state_style" field</summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.ResourceServiceReflection">
            <summary>Holder for reflection information generated from Dashboard/proto/resource_service.proto</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceServiceReflection.Descriptor">
            <summary>File descriptor for Dashboard/proto/resource_service.proto</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ApplicationInformationResponse.ApplicationNameFieldNumber">
            <summary>Field number for the "application_name" field.</summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.ResourceCommand">
            <summary>
            Defines a command that may be invoked on a resource.
            Defined by the resource service and sent to the dashboard.
            When a command is to be executed, an instance of ResourceCommandRequest is constructed
            using data from this message.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommand.CommandTypeFieldNumber">
            <summary>Field number for the "command_type" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommand.CommandType">
            <summary>
            Unique identifier for the command. Not intended for display.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommand.DisplayNameFieldNumber">
            <summary>Field number for the "display_name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommand.DisplayName">
            <summary>
            The display name of the command, to be shown in the UI. May be localized.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommand.ConfirmationMessageFieldNumber">
            <summary>Field number for the "confirmation_message" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommand.ConfirmationMessage">
            <summary>
            When present, this message must be shown to the user and their confirmation obtained
            before sending the request for this command to be executed.
            The user will be presented with Ok/Cancel options.
            </summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommand.HasConfirmationMessage">
            <summary>Gets whether the "confirmation_message" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.ResourceCommand.ClearConfirmationMessage">
            <summary>Clears the value of the "confirmation_message" field</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommand.ParameterFieldNumber">
            <summary>Field number for the "parameter" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommand.Parameter">
            <summary>
            Optional parameter that configures the command in some way.
            Clients must return any value provided by the server when invoking
            the command.
            </summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.ResourceCommandRequest">
            <summary>
            Represents a request to execute a command.
            Sent by the dashboard to DashboardService.ExecuteResourceCommand.
            Constructed with data from a corresponding ResourceCommand.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.CommandTypeFieldNumber">
            <summary>Field number for the "command_type" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.CommandType">
            <summary>
            Unique identifier for the command.
            Copied from the ResourceCommand that this request object is initialized from.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.ResourceNameFieldNumber">
            <summary>Field number for the "resource_name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.ResourceName">
            <summary>
            The name of the resource to apply the command to. Matches Resource.name.
            Copied from the ResourceCommand that this request object is initialized from.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.ResourceTypeFieldNumber">
            <summary>Field number for the "resource_type" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.ResourceType">
            <summary>
            The unique name of the resource type. Matches ResourceType.unique_name and Resource.resource_type.
            Copied from the ResourceCommand that this request object is initialized from.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.ParameterFieldNumber">
            <summary>Field number for the "parameter" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommandRequest.Parameter">
            <summary>
            An optional parameter to accompany the command.
            Copied from the ResourceCommand that this request object is initialized from.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommandResponse.KindFieldNumber">
            <summary>Field number for the "kind" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceCommandResponse.ErrorMessageFieldNumber">
            <summary>Field number for the "error_message" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceCommandResponse.HasErrorMessage">
            <summary>Gets whether the "error_message" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.ResourceCommandResponse.ClearErrorMessage">
            <summary>Clears the value of the "error_message" field</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceType.UniqueNameFieldNumber">
            <summary>Field number for the "unique_name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceType.UniqueName">
            <summary>
            Unique name for the resource type. Equivalent to Resource.resource_type
            If "display_name" is omitted, this value will be used in UIs.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceType.DisplayNameFieldNumber">
            <summary>Field number for the "display_name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceType.DisplayName">
            <summary>
            Display string for references to this type in UI. May be localized.
            If this value is omitted, UIs will show "unique_name" instead.
            </summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceType.HasDisplayName">
            <summary>Gets whether the "display_name" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.ResourceType.ClearDisplayName">
            <summary>Clears the value of the "display_name" field</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceType.CommandsFieldNumber">
            <summary>Field number for the "commands" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceType.Commands">
             <summary>
             Any commands that may be executed against resources of this type, avoiding
             the need to copy the value to every Resource instance.
            
             Note that these commands must apply to matching resources at any time.
            
             If the set of commands changes over time, use the "commands" property
             of the Resource itself.
             </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.EnvironmentVariable.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.EnvironmentVariable.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.EnvironmentVariable.HasValue">
            <summary>Gets whether the "value" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.EnvironmentVariable.ClearValue">
            <summary>Clears the value of the "value" field</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.EnvironmentVariable.IsFromSpecFieldNumber">
            <summary>Field number for the "is_from_spec" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Url.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Url.Name">
            <summary>
            The name of the url
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Url.FullUrlFieldNumber">
            <summary>Field number for the "full_url" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Url.FullUrl">
            <summary>
            The uri of the url. Format is scheme://host:port/{*path}
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.Url.IsInternalFieldNumber">
            <summary>Field number for the "is_internal" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.Url.IsInternal">
            <summary>
            Determines if this url shows up in the details view only by default.
            If true, the url will not be shown in the list of urls in the top level resources view.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceProperty.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceProperty.Name">
            <summary>
            Name of the data item, e.g. "container.id", "executable.pid", "project.path", ...
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceProperty.DisplayNameFieldNumber">
            <summary>Field number for the "display_name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceProperty.DisplayName">
            <summary>
            TODO move display_name to reference data, sent once when the connection starts
            Optional display name, may be localized
            </summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceProperty.HasDisplayName">
            <summary>Gets whether the "display_name" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.ResourceProperty.ClearDisplayName">
            <summary>Clears the value of the "display_name" field</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceProperty.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ResourceProperty.Value">
            <summary>
            The data value. May be null, a number, a string, a boolean, a dictionary of values (Struct), or a list of values (ValueList).
            </summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.InitialResourceData">
            <summary>
            Models a snapshot of resource state
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.InitialResourceData.ResourcesFieldNumber">
            <summary>Field number for the "resources" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.InitialResourceData.ResourceTypesFieldNumber">
            <summary>Field number for the "resource_types" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceDeletion.ResourceNameFieldNumber">
            <summary>Field number for the "resource_name" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ResourceDeletion.ResourceTypeFieldNumber">
            <summary>Field number for the "resource_type" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourcesChange.DeleteFieldNumber">
            <summary>Field number for the "delete" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourcesChange.UpsertFieldNumber">
            <summary>Field number for the "upsert" field.</summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.WatchResourcesChange.KindOneofCase">
            <summary>Enum of possible cases for the "kind" oneof.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourcesChanges.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.WatchResourcesRequest">
            <summary>
            Initiates a subscription for data about resources.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourcesRequest.IsReconnectFieldNumber">
            <summary>Field number for the "is_reconnect" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.WatchResourcesRequest.IsReconnect">
            <summary>
            True if the client is establishing this connection because a prior one closed unexpectedly.
            </summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.WatchResourcesRequest.HasIsReconnect">
            <summary>Gets whether the "is_reconnect" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.WatchResourcesRequest.ClearIsReconnect">
            <summary>Clears the value of the "is_reconnect" field</summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.WatchResourcesUpdate">
            <summary>
            A message received from the server when watching resources. Has multiple types of payload.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourcesUpdate.InitialDataFieldNumber">
            <summary>Field number for the "initial_data" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.WatchResourcesUpdate.InitialData">
            <summary>
            The current resource state, along with other reference data such as the set of resource types that may exist.
            Received once upon connection, before any changes.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourcesUpdate.ChangesFieldNumber">
            <summary>Field number for the "changes" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.WatchResourcesUpdate.Changes">
            <summary>
            One or more deltas to apply.
            </summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.WatchResourcesUpdate.KindOneofCase">
            <summary>Enum of possible cases for the "kind" oneof.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ConsoleLogLine.TextFieldNumber">
            <summary>Field number for the "text" field.</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ConsoleLogLine.IsStdErrFieldNumber">
            <summary>Field number for the "is_std_err" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ConsoleLogLine.IsStdErr">
            <summary>
            Indicates whether this line came from STDERR or not.
            </summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.ConsoleLogLine.HasIsStdErr">
            <summary>Gets whether the "is_std_err" field is set</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.ConsoleLogLine.ClearIsStdErr">
            <summary>Clears the value of the "is_std_err" field</summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.ConsoleLogLine.LineNumberFieldNumber">
            <summary>Field number for the "line_number" field.</summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.WatchResourceConsoleLogsRequest">
            <summary>
            Initiates a subscription for the logs of a resource.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourceConsoleLogsRequest.ResourceNameFieldNumber">
            <summary>Field number for the "resource_name" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.WatchResourceConsoleLogsRequest.ResourceName">
            <summary>
            Specifies the resource to watch logs from.
            </summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.WatchResourceConsoleLogsUpdate">
            <summary>
            A message received from the server when watching resource logs.
            Contains potentially many lines to be appended to the log.
            </summary>
        </member>
        <member name="F:Aspire.ResourceService.Proto.V1.WatchResourceConsoleLogsUpdate.LogLinesFieldNumber">
            <summary>Field number for the "log_lines" field.</summary>
        </member>
        <member name="P:Aspire.ResourceService.Proto.V1.DashboardService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Aspire.ResourceService.Proto.V1.DashboardService.DashboardServiceBase">
            <summary>Base class for server-side implementations of DashboardService</summary>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.DashboardService.BindService(Aspire.ResourceService.Proto.V1.DashboardService.DashboardServiceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Aspire.ResourceService.Proto.V1.DashboardService.BindService(Grpc.Core.ServiceBinderBase,Aspire.ResourceService.Proto.V1.DashboardService.DashboardServiceBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Aspire.ChannelExtensions.GetBatchesAsync``1(System.Threading.Channels.Channel{``0},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Reads batches, grabbing all available messages and returning them as one batch before yielding.
            This can give a better downstream experience, as there's less per-item overhead.
            </summary>
            <remarks>
            This sequence adopts the lifetime of <paramref name="channel"/>.
            Callers are required to either use a channel that will complete, or to pass a cancellation
            token which will also cancel the sequence returned by this method.
            </remarks>
            <typeparam name="T">The type of items in the channel and returned batch.</typeparam>
            <param name="channel">The channel to read values from.</param>
            <param name="minReadInterval">The minimum read interval. The enumerable will wait this long before returning the next available result.</param>
            <param name="cancellationToken">A token that signals a loss of interest in the operation.</param>
            <returns></returns>
        </member>
        <member name="T:Aspire.Dashboard.Otlp.Storage.CircularBuffer`1">
            <summary>
            The circular buffer starts with an empty list and grows to a maximum size.
            When the buffer is full, adding or inserting a new item removes the first item in the buffer.
            </summary>
        </member>
        <member name="T:Aspire.Dashboard.Model.KnownProperties">
            <summary>
            Models some known property names for known types of resources.
            </summary>
            <remarks>
            Used as keys in the "properties" dictionary on resource snapshots and view models.
            Should be compared using <see cref="P:Aspire.StringComparers.ResourcePropertyName"/>.
            </remarks>
        </member>
        <member name="M:Aspire.Dashboard.ConsoleLogs.TimestampParser.GenerateRfc3339RegEx">
            <remarks>
            Pattern:<br/>
            <code>^(?:\\d{4})-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])T(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])(?:\\.\\d{1,9})?(?:Z|(?:[Z+-](?:[01][0-9]|2[0-3]):(?:[0-5][0-9])))?</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ Match '-'.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '0'.<br/>
                    ○ Match a character in the set [1-9].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '1'.<br/>
                    ○ Match a character in the set [0-2].<br/>
            ○ Match '-'.<br/>
            ○ Match with 3 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '0'.<br/>
                    ○ Match a character in the set [1-9].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [12].<br/>
                    ○ Match a character in the set [0-9].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '3'.<br/>
                    ○ Match a character in the set [01].<br/>
            ○ Match 'T'.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [01].<br/>
                    ○ Match a character in the set [0-9].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '2'.<br/>
                    ○ Match a character in the set [0-3].<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a character in the set [0-9].<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a character in the set [0-9].<br/>
            ○ Optional (greedy).<br/>
                ○ Match '.'.<br/>
                ○ Match a Unicode digit greedily at least 1 and at most 9 times.<br/>
            ○ Optional (greedy).<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match 'Z'.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [+-Z].<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match a character in the set [0-9].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-3].<br/>
                        ○ Match ':'.<br/>
                        ○ Match a character in the set [0-5].<br/>
                        ○ Match a character in the set [0-9].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Aspire.IConfigurationExtensions.GetBool(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Gets the named configuration value as a boolean.
            </summary>
            <remarks>
            Parses <c>true</c> and <c>false</c>, along with integer values (where non-zero is <see langword="true"/>).
            </remarks>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> this method extends.</param>
            <param name="key">The configuration key.</param>
            <returns>The parsed value, or <see langword="null"/> if no value exists or it couldn't be parsed.</returns>
        </member>
        <member name="M:Aspire.IConfigurationExtensions.GetBool(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Boolean)">
            <summary>
            Gets the named configuration value as a boolean.
            </summary>
            <remarks>
            Parses <c>true</c> and <c>false</c>, along with <c>1</c> and <c>0</c>.
            </remarks>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> this method extends.</param>
            <param name="key">The configuration key.</param>
            <param name="defaultValue">A default value, for when the configuration value is unspecified or white space.</param>
            <returns></returns>
        </member>
        <member name="M:Aspire.IConfigurationExtensions.GetUri(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Uri)">
            <summary>
            Parses a configuration value into a <see cref="T:System.Uri"/> object.
            </summary>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> this method extends.</param>
            <param name="key">The configuration key.</param>
            <param name="defaultValue">A default value, for when the configuration value is unspecified or white space. May be <see langword="null"/>.</param>
            <returns>The parsed value, or the default value if specified and parsing failed. Returns <see langword="null"/> if <paramref name="defaultValue"/> is <see langword="null"/> and parsing failed.</returns>
            <exception cref="T:System.InvalidOperationException">The configuration value could not be accessed, or contained incorrectly formatted data.</exception>
        </member>
        <member name="M:Aspire.IConfigurationExtensions.GetUris(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Uri)">
            <summary>
            Parses a configuration value's semicolon-delimited value into an array of <see cref="T:System.Uri"/> objects.
            </summary>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> this method extends.</param>
            <param name="key">The configuration key.</param>
            <param name="defaultValue">A default value, for when the configuration value is unspecified or white space. May be <see langword="null"/>.</param>
            <returns>The parsed values, or the default value if specified and parsing failed. Returns <see langword="null"/> if <paramref name="defaultValue"/> is <see langword="null"/> and parsing failed.</returns>
            <exception cref="T:System.InvalidOperationException">The configuration value could not be accessed, or contained incorrectly formatted data.</exception>
        </member>
        <member name="M:Aspire.IConfigurationExtensions.GetEnum``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Nullable{``0})">
            <summary>
            Gets the named configuration value as a member of an enum, or <paramref name="defaultValue"/> if the value was null or empty.
            </summary>
            <remarks>
            Parsing is case-insensitive.
            </remarks>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> this method extends.</param>
            <param name="key">The configuration key.</param>
            <param name="defaultValue">A default value, for when the configuration value is unable to be parsed.</param>
            <exception cref="T:System.InvalidOperationException">The configuration value is not a valid member of the enum.</exception>
            <returns>The parsed enum member, or <paramref name="defaultValue"/> the configuration value was null or empty.</returns>
        </member>
        <member name="M:Aspire.IConfigurationExtensions.GetEnum``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Gets the specified required configuration value as a member of an enum.
            </summary>
            <remarks>
            Parsing is case-insensitive.
            </remarks>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> this method extends.</param>
            <param name="key">The configuration key.</param>
            <exception cref="T:System.InvalidOperationException">The configuration value is empty or not a valid member of the enum.</exception>
            <returns>The parsed enum member.</returns>
        </member>
        <member name="F:Aspire.KnownFormats.ConsoleLogsTimestampFormat">
            <summary>
            Format is passed to apps as an env var to override logging's timestamp format.
            It is also used to parse logs when they're displayed in the dashboard's console logs UI.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.SecretManager.Tools.Internal.SecretsStore">
            <summary>
            Adapted from dotnet user-secrets at https://github.com/dotnet/aspnetcore/blob/482730a4c773ee4b3ae9525186d10999c89b556d/src/Tools/dotnet-user-secrets/src/Internal/SecretsStore.cs
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ApplicationNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ApplicationNameRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the VersionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.VersionRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GenerateRfc3339RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GenerateRfc3339RegEx_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_CC5DD796C5DC14AB3843B0392E0C498637CD32EDEC8D181AE0E31F1F9AD7CD47(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [^.\d].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_40FF030000000000000000">
            <summary>Supports searching for characters in or not in ".0123456789".</summary>
        </member>
    </members>
</doc>
